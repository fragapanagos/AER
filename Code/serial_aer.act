// This file defines a serialized tree tranceiver
import "lib/globals.act";
import "lib/channel.act";
import "arbiter.act";
import "logic.act";
import "comm.act";

namespace aer {
    namespace transmitter {
        export
        template <pint N>
        defproc NODE (globals g; bool ci[N], co[N], pi, po; c1of<N> c[N], p) {
            // AEXT tree NODE controller
            bool c_[N], q[N], u;
            c1of<N> w;
            ::arbiter::N_ARB<N> arb(g, ci, c_);

            prs<g.Vdd, g.GND> {
                c_[0] & ~co[1] -> q[0]+
                g.pReset | ~c_[0] & co[0] -> q[0]-
                c_[1] & ~co[0] -> q[1]+
                g.pReset | ~c_[1] & co[1] -> q[1]-

                (| : n : N : q[n]) -> po+
                (& : n : N : ~q[n]) -> po-
            
                (: n : N :
                    q[n] & pi & ~u -> w.d[n]+
                    g.pReset | u -> w.d[n]-
                )

                (| : n : N : w.d[n]) & ~pi -> u+
                ~po -> u-
                
                (: nc : N :
                    q[nc] & u & pi -> co[nc]+
                    (~u | (| : n : N : p.d[n])) & ~pi -> co[nc]-
                )

                (: n : N :
                    (| : nc : N : c[nc].d[n]) | w.d[n] => p.d[n]+
                )
            }
        }

        template <pint N>
        defproc LEAF (globals g; bool ci[N], co[N], pi, po; c1of<N> p) {
            // leaf node of aext tree
            bool c[N], q[N], u;
            ::arbiter::N_ARB<N> arb(g, ci, c);

            prs<g.Vdd, g.GND> {
                c[0] & ~co[1] -> q[0]+
                g.pReset | ~c[0] & co[0] -> q[0]-
                c[1] & ~co[0] -> q[1]+
                g.pReset | ~c[1] & co[1] -> q[1]-

                (| : n : N : q[n]) -> po+
                (& : n : N : ~q[n]) -> po-
            
                (: n : N :
                    q[n] & pi & ~u -> p.d[n]+
                    g.pReset | u -> p.d[n]-
                )

                (| : n : N : p.d[n]) & ~pi -> u+
                ~po -> u-
                
                (: n : N :
                    q[n] & u & pi -> co[n]+
                    ~u & ~pi -> co[n]-
                )
            }
        }

        template <pint N>
        defproc OUT (globals g; bool xi, xo; c1of<N> x; e1of<N> y) {
            // interface AEXT tree with e1ofN channel
            x.d = y.d;
            prs {
                xi & y.e => xo+
            }
        }

        export
        template <pint M, N, NN>
        defproc AEXT_ (globals g; bool xi[NN], xo[NN], ci[N], co[N], pi, po; c1of<N> p) {
            // utility for AEXT
            [ M = 1 ->
                NN = N;
                LEAF<N> leaf(g, ci, co, pi, po, p);
                ci = xi;
                co = xo;
            [] M > 1 ->
                pint k = NN/N;
                AEXT_<M-1, N, k> _[N];
                (; n : N :
                    _[n].g = g;
                    _[n].xi = xi[n*k..(n+1)*k-1];
                    _[n].xo = xo[n*k..(n+1)*k-1];
                )

                NODE<N> node(g,,, pi, po,, p);
                (; n : N :
                    node.ci[n] = _[n].po;
                    node.co[n] = _[n].pi;
                    node.c[n] = _[n].p;
                )
            ]
        }

        export
        template <pint M, N, NN>
        defproc AEXT (globals g; bool xi[NN], xo[NN]; e1of<N> y) {
            // Serial transmitter
            // M layers in the tree
            // N for 1-of-N encoding. + tail word line
            // NN = N^M neurons
            [ M = 0 ->
                0 = 1;
            [] M > 0 ->
                AEXT_<M, N, NN> _(g, xi, xo,,,,,);
                OUT<N> out(g, _.po, _.pi, _.p, y);
            ]
        }

        namespace test {
            export
            template <pint M, N, NN>
            defproc TEST_AEXT (globals g) {
                // M layers in the tree
                // N for 1-of-N encoding. + tail word line
                // NN = N^M neurons
                active_handshaker<NN> a(g,,);
                AEXT<M, N, NN> aext(g, a.o, a.i,);
                VN_e1ofN<N> vn(aext.y);
            }

            export
            template <pint M, N, NN, nn>
            defproc TEST_AEXT1 (globals g) {
                // M layers in the tree
                // N for 1-of-N encoding. + tail word line
                // NN = N^M neurons
                active_handshaker<1> a(g,,);
                AEXT<M, N, NN> aext(g,,,);
                VN_e1ofN<N> vn(aext.y);
                a.o[0] = aext.xi[nn];
                a.i[0] = aext.xo[nn];
                [ nn > 0 ->
                    (; idx : 0..nn-1 :
                        aext.xi[idx] = g.GND;
                    )
                ]
                [ nn < NN ->
                    (; idx : nn+1..NN-1 :
                        aext.xi[idx] = g.GND;
                    )
                ]
            }
        } // namespace test
    } // namespace transmitter

    namespace receiver {
        template <pint N>
        defproc INT (e1of<N+1> x; bool yi, yo) {
            // interface with the neuron
            // N for 1-of-N encoding. + tail word line
            yi = x.e;
            x.d[N] = yo;
        }

        template <pint N, NC>
        defproc ROUTE (globals g; e1of<N+1> p, c[NC]; e1of<N> h) {
            // routes parent data to requesting child
            // assumes child requests are mutually exclusive
            //
            // parameters
            // ----------
            // N for 1-of-N encoding. + tail word line
            // NC children
            // 
            // ports
            // -----
            // p parent, active
            // c children, passive
            // h read_head, passive
            prs {
                (| : nc : NC : c[nc].e) | h.e => p.e+
                
                (: nc : NC :
                    (: n : N+1 :
                        p.d[n] & c[nc].e -> c[nc].d[n]+
                        ~p.d[n] -> c[nc].d[n]-
                    )
                )

                (: n : N :
                    p.d[n] & h.e -> h.d[n]+
                    ~p.d[n] -> h.d[n]-
                )
            }
        }

        template <pint N>
        defproc READ_HEAD (globals g; e1of<N> x; bool si, s[N]) {
            // reads the head of a packet to determine the routing direction
            // N for 1-of-N encoding. + tail word line
            bool u[N];
            /* version [si];xe+;[xi];u+;xe-;[~xi];so+;[~si];u-;so- ----------*/
            // /*
                prs<g.Vdd, g.GND> {
                    si & (& : n : N : ~u[n]) -> x.e+
                    (| : n : N : u[n]) -> x.e-

                    (: n : N :
                        x.d[n] -> u[n]+
                        g.pReset | ~si -> u[n]-
                    )

                    (: n : N :
                        u[n] & ~x.d[n] -> s[n]+
                        g.pReset | ~u[n] | x.d[n] -> s[n]-
                    )
                }
            // */
        }

        template <pint N>
        defproc FWD_BODY (globals g; e1of<N+1> p, c[N]; bool s[N], so) {
            // forwards the body of a packet to a child
            // N for 1-of-N encoding. + tail word line
            /* version pipelined --------------------------------------------*/
            /*
                bool q;
                OR<(N+1)*N> or(, q);
                (; nc : N : (; n : N+1 : or.i[nc*(N+1)+n] = c[nc].d[n];))

                prs<g.Vdd, g.GND> {
                    (| : n : N : s[n]) & ~q -> p.e+
                    g.pReset | q -> p.e-

                    ~q -> so+
                    ~p.d[N] & (| : n : N : ~c[n].e & c[n].d[N]) -> so-

                    (: nc : N :
                        (: n : N :
                            p.d[n] & s[nc] & c[nc].e -> c[nc].d[n]+
                            g.pReset | ~p.d[n] & ~c[nc].e -> c[nc].d[n]-
                        )
                        p.d[N] & s[nc] & c[nc].e -> c[nc].d[N]+ // tail
                        g.pReset | ~s[nc] -> c[nc].d[N]-
                    )
                }
            */
            /* version unpipelined ------------------------------------------*/
            // /*
                prs<g.Vdd, g.GND> {
                    (| : n : N : s[n] & c[n].e) -> p.e+
                    g.pReset | (| : n : N : s[n] & ~c[n].e) -> p.e-

                    (& : n : N : ~c[n].d[N]) -> so+
                    ~p.d[N] & (| : n : N : c[n].d[N]) -> so-

                    (: nc : N :
                        (: n : N :
                            p.d[n] & s[nc] -> c[nc].d[n]+
                            g.pReset | ~p.d[n] | ~s[nc] -> c[nc].d[n]-
                        )
                        p.d[N] & s[nc] -> c[nc].d[N]+
                        g.pReset | ~s[nc] -> c[nc].d[N]-
                    )
                }
            // */
        }

        template <pint N>
        defproc NODE (globals g; e1of<N+1> p, c[N]) {
            // node in receiver tree
            // N for 1-of-N encoding. + tail word line
            ROUTE<N, 1> route(g, p,,);
            READ_HEAD<N> head(g, route.h,,);
            FWD_BODY<N> fwd(g, route.c[0], c, head.s, head.si);
        }

        export
        template <pint M, N, NN>
        defproc AERV (globals g; e1of<N+1> x; bool yi[NN], yo[NN]) {
            // Serial receiver
            // M layers in the tree
            // N for 1-of-N encoding
            // NN = N^M neurons
            [ M = 0 ->
                NN = 1; // check that NN = N^M
                INT<N> n_int(x, yi[0], yo[0]);
            [] M > 0 ->
                bool xt = x.d[N];
                pint k = NN/N;
                NODE<N> node(g, x,);
                AERV<M-1, N, k> _[N];

                (; n : N : g = _[n].g;)
                (; n : N : node.c[n] = _[n].x;)
                (; n : N-1 :
                    _[n].yi = yi[n*k..(n+1)*k-1];
                    _[n].yo = yo[n*k..(n+1)*k-1];
                )
                _[N-1].yi = yi[(N-1)*k..NN-1];
                _[N-1].yo = yo[(N-1)*k..NN-1];
            ]
        }

        namespace test {
        } // namespace test
    } // namespace receiver

    export
    template <pint M, N, NN>
    defproc AER (globals g; bool xi[NN], xo[NN], yi[NN], yo[NN]) {
        // address-event representation tranceiver
        // packets are serialized 
        // Uses M 1-of-N encoding
        // M groups
        // N items per group
        // NN=N^M
        transmitter::AEXT<M, N, NN> aext(g, xi, xo,);
        receiver::AERV<M, N, NN> aerv(g,, yi, yo);
        aext.y = aerv.x;
    }

    namespace test {
        export
        template <pint M, N, NN>
        defproc TEST_AER (globals g) {
            // M groups
            // N items per group
            // NN neurons. NN=N^M
            active_handshaker<NN> x(g,,);
            active_handshaker<NN> y(g,,);
            AER<M, N, NN> aer(g, x.o, x.i, y.o, y.i);
        }

        export
        template <pint M, N, NN>
        defproc TEST_AER1 (globals g) {
            // Tests AER with 1 neuron
            // M groups
            // N items per group
            // NN neuron ports. NN=N^M
            active_handshaker<1> x(g,,);
            active_handshaker<1> y(g,,);
            AER<M, N, NN> aer(g,,,,);
            aer.xi[0] = x.o[0];
            aer.xo[0] = x.i[0];
            aer.yi[0] = y.o[0];
            aer.yo[0] = y.i[0];
            (; nn : 1..NN-1 :
                aer.xi[nn] = g.GND;
                aer.yi[nn] = g.GND;
            )
        }
    } // namespace test
} // namespace aer
