// This file contains PRS for the transmitter circuits
import "lib/globals.act";
import "channel.act";

namespace transmitter {

export
defproc EVT (globals g; port p, r, c) {
    bool u, _pi;
    prs {
        ~g.sReset & ~_pi & ~r.i -> r.o+
        g.pReset | _pi          -> r.o-

        g.pReset | r.i & r.o -> u-
        ~g.sReset & ~r.i     -> u+

        u => p.o-
        u => c.o-

        p.i => _pi-
    }
}

export
defproc INT (globals g; port v, e, c) {
}


export
defproc ARB (globals g; port l1, l2, r) {
    bool _a1i,_a2i,_a1o,_a2o,a1o,a2o,_ri;

    //Force Arbiter Behavior
    spec {
        mk_exclhi(l1.o, l2.o)
        mk_excllo(_a1i,_a2i)
    }

    //Implement fair and greedy algorithm
    prs<g.Vdd,g.GND> {
        //asymmetric c-elements
        l1.i & _ri -> _a1o-
        ~l1.i      -> _a1o+
        l2.i & _ri -> _a2o-
        ~l2.i      -> _a2o+

        // staticizers
        _a1o => a1o-
        _a2o => a2o-

        // parent lines
        a1o | a2o => r.o+
        r.i => _ri-
    }

    //Cross-Coupled NANDs
    prs<g.Vdd,g.GND> {
        //_a1i NAND
        a1o & _a2i   -> _a1i-
        ~a1o | ~_a2i -> _a1i+
        //_a2i NAND
        a2o &  _a1i  -> _a2i-
        ~a2o | ~_a1i -> _a2i+
    }

    //Filter
    prs<g.Vdd,g.GND> {
        //Inverters
        _a1i => l1.o-
        _a2i => l2.o-
    }
    
}

export
defproc LTH (globals gl; port l, g; bool rk) {
}

export
defproc ADY (globals g; port y, v, d) {
}

export
defproc ADX (globals g; port x, v, c) {
}

export
defproc SEQ (globals g; port s, x, y, t, d) {
}

} // namespace transmitter
