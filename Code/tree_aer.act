// This file contains PRS for a feedfoward tree transmitter
import "lib/globals.act";
import "channel.act";
import "arbiter.act";
import "logic.act";
import "test.act";

pint N=2;
namespace aer {
    namespace transmitter {
        defproc NODE_LEAF_PSX (globals g; bool di[2], do[2]; aMx1ofN<1,N> x) {
            // leaf node of transmitter tree
            // pipelined send, sequential reset X first
            bool a[2], xi;
            xi = x.a;
            ::arbiter::ARB arb(di, a);

            prs<g.Vdd, g.GND> {
                a[0] & ~do[1] & ~do[0] -> x.m[0].n[0]+
                g.pReset | do[0] -> x.m[0].n[0]-

                a[1] & ~do[0] & ~do[1] -> x.m[0].n[1]+
                g.pReset | do[1] -> x.m[0].n[1]-

                xi & a[0] & ~do[1] -> do[0]+
                ~xi & ~a[0] -> do[0]-

                xi & a[1] & ~do[0] -> do[1]+
                ~xi & ~a[1] -> do[1]-
            }
        }

        defproc NODE_LEAF_PP (globals g; bool di[2], do[2]; aMx1ofN<1,N> x) {
            // leaf node of transmitter tree
            // pipelined send, pipelined reset
            bool a[2], xi;
            xi = x.a;
            ::arbiter::ARB arb(di, a);

            prs<g.Vdd, g.GND> {
                a[0] & ~do[1] -> x.m[0].n[0]+
                g.pReset | ~a[0] -> x.m[0].n[0]-

                a[1] & ~do[0] -> x.m[0].n[1]+
                g.pReset | ~a[1] -> x.m[0].n[1]-

                xi & a[0] & ~do[1] -> do[0]+
                ~xi -> do[0]-

                xi & a[1] & ~do[0] -> do[1]+
                ~xi -> do[1]-
            }
        }

        template <pint M>
        defproc NODE_INT_PSX (globals g; aMx1ofN<M,N> d[2]; aMx1ofN<M+1,N> x) {
            // interior node of transmitter tree
            // pipelined send, sequential reset X first
            bool a[2], do[2];
            bool xi = x.a; // for convenience
            ::arbiter::ARB arb(, a);
            VN<M,2> vn[2];

            do[0] = d[0].a;
            do[1] = d[1].a;
            vn[0].d = d[0].m;
            vn[1].d = d[1].m;
            arb.i[0] = vn[0].o;
            arb.i[1] = vn[1].o;

            prs<g.Vdd, g.GND> {
                a[0] & ~do[1] & ~do[0] -> x.m[0].n[0]+
                g.pReset | do[0] -> x.m[0].n[0]-

                a[1] & ~do[0] & ~do[1] -> x.m[0].n[1]+
                g.pReset | do[1] -> x.m[0].n[1]-

                (: m : M :
                    (a[0] & d[0].m[m].n[0] | a[1] & d[1].m[m].n[0]) &
                        ~do[1] & ~do[0] -> x.m[m+1].n[0]+
                    g.pReset | do[0] | do[1] -> x.m[m+1].n[0]-

                    (a[0] & d[0].m[m].n[1] | a[1] & d[1].m[m].n[1]) &
                        ~do[1] & ~do[0] -> x.m[m+1].n[1]+
                    g.pReset | do[0] | do[1] -> x.m[m+1].n[1]-
                )

                xi & a[0] & ~do[1] -> do[0]+
                ~xi & ~a[0] -> do[0]-

                xi & a[1] & ~do[0] -> do[1]+
                ~xi & ~a[1] -> do[1]-
            }
        }

        template <pint M>
        defproc NODE_INT_PP (globals g; aMx1ofN<M,N> d[2]; aMx1ofN<M+1,N> x) {
            // interior node of transmitter tree
            // pipelined send, pipelined reset
            bool a[2], do[2];
            bool xi = x.a; // for convenience
            ::arbiter::ARB arb(, a);
            VN<M,2> vn[2];

            do[0] = d[0].a;
            do[1] = d[1].a;
            vn[0].d = d[0].m;
            vn[1].d = d[1].m;
            arb.i[0] = vn[0].o;
            arb.i[1] = vn[1].o;

            prs<g.Vdd, g.GND> {
                a[0] & ~do[1] -> x.m[0].n[0]+
                g.pReset | ~a[0] -> x.m[0].n[0]-

                a[1] & ~do[0] -> x.m[0].n[1]+
                g.pReset | ~a[1] -> x.m[0].n[1]-

                (: m : M :
                    (a[0] & d[0].m[m].n[0] | a[1] & d[1].m[m].n[0])
                        & ~do[0] & ~do[1] -> x.m[m+1].n[0]+
                    g.pReset | (~a[0] & do[0] | ~a[1] & do[1])
                        -> x.m[m+1].n[0]-


                    (a[0] & d[0].m[m].n[1] | a[1] & d[1].m[m].n[1])
                        & ~do[0] & ~do[1] -> x.m[m+1].n[1]+
                    g.pReset | (~a[0] & do[0] | ~a[1] & do[1])
                        -> x.m[m+1].n[1]-
                )

                xi & a[0] & ~do[1] -> do[0]+
                ~xi -> do[0]-

                xi & a[1] & ~do[0] -> do[1]+
                ~xi -> do[1]-
            }
        }

        export
        defproc NODE_LEAF (globals g; bool di[2], do[2]; aMx1ofN<1,N> x) {
            // NODE_LEAF_PSX imp(g, di, do, x);
            NODE_LEAF_PP imp(g, di, do, x);
        }

        template <pint M>
        defproc NODE_INT (globals g; aMx1ofN<M,N> d[2]; aMx1ofN<M+1,N> x) {
            // NODE_INT_PSX<M> imp(g, d, x);
            NODE_INT_PP<M> imp(g, d, x);
        }


        export
        template <pint M, NN>
        defproc AEXT (globals g; bool ci[NN], co[NN]; aMx1ofN<M,N> x) {
            // transmitter
            // M number of bits
            // NN number of neurons. NN=N^M
            bool xi = x.a; // for convenience

            [ M = 1 ->
                NN = N; // assert NN=N. checks for NN=N^M overall
                NODE_LEAF node_leaf(g, ci, co, x);
            [] M > 1 ->
                AEXT<M-1, NN/2> aext[2];
                NODE_INT<M-1> node_int(g,, x);
                aext[0].g = g;
                aext[1].g = g;
                aext[0].ci = ci[0..NN/2-1];
                aext[1].ci = ci[NN/2..NN-1];
                aext[0].co = co[0..NN/2-1];
                aext[1].co = co[NN/2..NN-1];
                node_int.d[0] = aext[0].x;
                node_int.d[1] = aext[1].x;
            ]
        }

        namespace test {
            export
            defproc TEST_LEAF (globals g) {
                active_handshaker<2> s(g,,);
                NODE_LEAF node(g,,,);
                VN<1,N> vn(,);
                node.di = s.o;
                node.do = s.i;
                node.x.m = vn.d;
                node.x.a = vn.o;
            }

            export
            template <pint M, NN>
            defproc TEST_AEXT (globals g) {
                active_handshaker<NN> s(g,,);
                AEXT<M,NN> aext(g,,,);
                VN<M,N> vn(,);
                aext.ci = s.o;
                aext.co = s.i;
                aext.x.m = vn.d;
                aext.x.a = vn.o;
            }
        } // namespace test
    } // namespace transmitter

    namespace receiver {
        namespace test {
        } // namespace test
    } // namespace receiver

    export
    template <pint NN>
    defproc AER (globals g) {
    }

    namespace test {
    } // namespace test
} // namespace aer

