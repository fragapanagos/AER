// This file contains PRS for the arbiter circuits
import "globals.act";
import "channel.act";
import "environment.act";

namespace arbiter {
    // contains arbiter related processes. 

    export
    defproc ARB (globals g; bool i[2], o[2]) {
        // The basic 2-input arbiter
        bool _x[2];
    
        spec {
            mk_excllo(_x[0], _x[1])
        }
    
        //Cross-Coupled NANDs
        prs<g.Vdd, g.GND> {
            i[0] & _x[1]  -> _x[0]-
            ~i[0] | ~_x[1]  -> _x[0]+
            i[1] & _x[0]  -> _x[1]-
            ~i[1] | ~_x[0]  -> _x[1]+
        }
    
        //Filter
        [ ~LAYOUT ->
            prs <g.Vdd, g.GND> {
                _x[0] => o[0]-
                _x[1] => o[1]-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND> {
                [keeper=0] passp(_x[0], _x[1], o[0])
                [keeper=0] _x[0] -> o[0]-
    
                [keeper=0] passp(_x[1], _x[0], o[1])
                [keeper=0] _x[1] -> o[1]-
            }
        ]
    }
    
    export
    defproc _ARB (globals g; bool _i[2], _o[2]) {
        // The basic 2-input arbiter with active low inputs/outputs
        bool x[2];
    
        spec {
            mk_exclhi(x[0], x[1])
        }
    
        //Cross-Coupled NORs
        prs<g.Vdd, g.GND> {
            _i[0]<12> | x[1]<12> -> x[0]-
            ~_i[0]<32> & ~x[1]<32> -> x[0]+
            _i[1]<12> | x[0]<12> -> x[1]-
            ~_i[1]<32> & ~x[0]<32> -> x[1]+
        }
    
        //Filter
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                x[0] => _o[0]-
                x[1] => _o[1]-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND> {
                [keeper=0] passn<9>(x[0], x[1], _o[0])
                [keeper=0] ~x[0]<15> -> _o[0]+
    
                [keeper=0] passn<9>(x[1], x[0], _o[1])
                [keeper=0] ~x[1]<15> -> _o[1]+
            }
        ]
    }
    
    namespace n_arb_2arb_node {
        // N-way arbiter using only 2 arbiters per node
        defproc CTRL (globals g; bool _ci[2], s0i, s0o, _s1i, s1o, pi, _po) {
            // sequences between children and parent communications
            bool x, y, _y, po;
            prs<g.Vdd,g.GND> {
                g._sReset & (~_ci[0] | ~_ci[1]) & ~_y -> po+
                g.pReset | _s1i & x & _y -> po-
        
                po => _po-

                g._sReset & ~x & ~_y -> s0o+
                g.pReset | x | _y -> s0o-
        
                g._sReset & ~s0i & ~x & ~y -> s1o+
                g.pReset | x -> s1o-
        
                g.pReset | ~_s1i & ~y -> x+
                g._sReset & pi & y -> x-
        
                ~pi -> y+
                s0i -> y-

                y => _y-
            }
        }
        
        export
        defproc C_ARB (globals g; bool _si, _so, _ci, co) {
            // controlled arbiter cell for use with CTRL
            // arbitrates between child request and CTRL request
            bool cso, sso;
            bool _ci_hat, _si_hat, _co;
            _ARB arb(g,,);
            arb._i[0] = _ci;
            arb._i[1] = _si;
            arb._o[0] = _ci_hat;
            arb._o[1] = _si_hat;
        
            prs {
                ~_ci_hat & ~_si & ~sso -> cso+
                _ci_hat -> cso-
        
                _si & cso -> _co-
                ~_si | ~cso -> _co+
        
                ~_si_hat & ~co -> sso+
                _si_hat | co -> sso-
        
                cso | sso => _so-

                _co => co-
            }
        }

        export 
        defproc H_ARB (globals g; bool _ci[2], co[2], pi, _po) {
            // heirarchical arbiter cell
            // can be arranged in a binary tree to service more than 2 children
            CTRL ctrl(g, _ci,,,,, pi, _po);
            C_ARB c0_arb(g,,, _ci[0], co[0]), c1_arb(g,, ctrl._s1i, _ci[1], co[1]);

            prs {
                ctrl.s0o => c0_arb._si-
                c0_arb._so => ctrl.s0i- 
                ctrl.s1o => c1_arb._si-
            }
        }

        template <pint N>
        defproc N_ARB_ (globals g; bool _ci[N], co[N], pi, _po) {
            // recursive utility to build an N-way arbiter tree
            [ N = 1 ->
                _ci[0] = _po;
                co[0] = pi;
            [] N = 2 ->
                H_ARB h_arb(g, _ci, co, pi, _po);
            [] N > 2 ->
                N_ARB_<N/2>   n_arb0_(g, _ci[0..N/2-1], co[0..N/2-1],,);
                N_ARB_<N-N/2> n_arb1_(g, _ci[N/2..N-1], co[N/2..N-1],,);
                H_ARB h_arb(g,,, pi, _po);
                h_arb._ci[0] = n_arb0_._po;
                h_arb._ci[1] = n_arb1_._po;
                h_arb.co[0] = n_arb0_.pi;
                h_arb.co[1] = n_arb1_.pi;
            ]
        }

        export
        template <pint N>
        defproc N_ARB (globals g; bool i[N], o[N]) {
            // N-way arbiter
            [ N = 2 ->
                ARB arb(g, i, o);
            [] N = 1 | N > 2 ->
                bool _i[N];
                N_ARB_<N> n_arb_(g, _i, o,,);
                prs {
                    // connect top of tree back to itself
                    n_arb_._po => n_arb_.pi-
                    // connect child ports to arbiter leaves
                    (: n : N : i[n] => _i[n]-)
                }
            ]
        }

        export
        template <pint N>
        defproc _N_ARB (globals g; bool _i[N], _o[N]) {
            // active low version of N_ARB
            [ N = 2 ->
                _ARB _arb(g, _i, _o);
            [] N = 1 | N > 2 ->
                bool o[N];
                N_ARB_<N> n_arb_(g, _i, o,,);
                prs {
                    // connect top of tree back to itself
                    n_arb_._po => n_arb_.pi-
                    // connect child ports to arbiter leaves
                    (: n : N : o[n] => _o[n]-)
                }
            ]
        }

        namespace test {
            defproc C_ARB_handshaker (globals g; bool _si, _so, ci, _co) {
                // used in TEST_C_ARB
                prs<g.Vdd,g.GND> {
                    g.pReset | ~_si -> _so+
                    g._sReset & _si -> _so-

                    g.pReset | ci -> _co+
                    g._sReset & ~ci -> _co-
                }
            }

            export
            defproc TEST_C_ARB (globals g) {
                C_ARB_handshaker c(g,,,,);
                C_ARB c_arb(g,,,,);
                
                c_arb._si = c._so;
                c_arb._so = c._si;
                c_arb._ci = c._co;
                c_arb.co = c.ci;
            }

            export 
            defproc TEST_H_ARB (globals g) {
                // tests H_ARB
                active_handshaker<2> c(g,,);
                H_ARB h_arb(g,, c.i,,);
                
                // connect top of H_ARB back to itself
                prs<g.Vdd,g.GND> {
                    h_arb._po => h_arb.pi-

                    c.o[0] => h_arb._ci[0]-
                    c.o[1] => h_arb._ci[1]-
                }
            }

            export
            template<pint N>
            defproc TEST_N_ARB (globals g) {
                // tests N_ARB
                N_ARB<N> n_arb(g,,);
                active_handshaker<N> c(g,,);

                c.o = n_arb.i;
                c.i = n_arb.o;
            }

            export
            template<pint N>
            defproc TEST_N_ARB_HALF_EVEN (globals g) {
                // tests N_ARB with only even ports active
                N_ARB<N> n_arb(g,,);
                active_handshaker<N/2> c(g,,);

                // connect children to arbiter tree ports
                (; n : N/2 : 
                    c.o[n] = n_arb.i[2*n];
                    c.i[n] = n_arb.o[2*n];
                )

                // connect dangling arbiter tree ports to GND
                (; n : N/2 : 
                    n_arb.i[2*n+1] = g.GND;
                )
            }

            export
            template<pint N>
            defproc TEST_N_ARB_HALF_ODD (globals g) {
                // tests N_ARB with only odd ports active
                N_ARB<N> n_arb(g,,);
                active_handshaker<N/2> c(g,,);

                // connect children to arbiter tree ports
                (; n : N/2 : 
                    c.o[n] = n_arb.i[2*n+1];
                    c.i[n] = n_arb.o[2*n+1];
                )

                // connect dangling arbiter tree ports to GND
                (; n : N/2 : 
                    n_arb.i[2*n] = g.GND;
                )
            }

            export
            template<pint N>
            defproc TEST_N_ARB_HALF_MID (globals g) {
                // tests N_ARB with only middle ports active
                N_ARB<N> n_arb(g,,);
                active_handshaker<N/2> c(g,,);

                // connect children to arbiter tree ports
                (; n : N/2 : 
                    c.o[n] = n_arb.i[N/4+n];
                    c.i[n] = n_arb.o[N/4+n];
                )

                // connect dangling arbiter tree ports to GND
                (; n : N/4 : 
                    n_arb.i[n] = g.GND;
                    n_arb.i[3*N/4+n] = g.GND;
                )
            }

            export
            template<pint N>
            defproc TEST__N_ARB (globals g) {
                // tests _N_ARB
                _N_ARB<N> _n_arb(g,,);
                _active_handshaker<N> _c(g,,);

                _c._o = _n_arb._i;
                _c._i = _n_arb._o;
            }
        } // namespace test
    } // namespace n_arb_2arb_node

    namespace n_arb_c {
        // cheap N-way arbiter
        template <pint N, width>
        defproc N_ARB_ (globals g; bool i[N], o[N], pi, po) {
            // utility for N_ARB_C
            // N neurons
            [ N = 1 ->
                i[0] = po;
                o[0] = pi;
            [] N > 1 ->
                bool ao[2], _ao[2], _po;
                N_ARB_<N/2> n_arb0(g, i[0..N/2-1], o[0..N/2-1], ao[0],);
                N_ARB_<N-N/2> n_arb1(g, i[N/2..N-1], o[N/2..N-1], ao[1],);
                ARB arb(g,,);
                arb.i[0] = n_arb0.po;
                arb.i[1] = n_arb1.po;
                prs<g.Vdd, g.GND> {
                   arb.o[0] & _ao[1] | arb.o[1] & _ao[0] -> _po-
                   g.pReset | ~arb.o[0] & ~_ao[0] | ~arb.o[1] & ~_ao[1] -> _po+

                   pi & arb.o[0] & _ao[1] -> _ao[0]-
                   ~pi -> _ao[0]+

                   pi & arb.o[1] & _ao[0] -> _ao[1]-
                   ~pi -> _ao[1]+

                   _po => po-
                   _ao[0] => ao[0]-
                   _ao[1] => ao[1]-
                }
            ]
        }
        
        export
        template <pint N, width>
        defproc N_ARB (globals g; bool i[N], o[N]) {
            // cheap N-way arbiter
            [ N = 1 ->
                i[0] = o[0];
            [] N > 1 ->
                N_ARB_<N/2> n_arb0(g, i[0..N/2-1], o[0..N/2-1],,);
                N_ARB_<N-N/2> n_arb1(g, i[N/2..N-1], o[N/2..N-1],,);
                ARB arb(g,,);
                arb.i[0] = n_arb0.po;
                arb.i[1] = n_arb1.po;
                arb.o[0] = n_arb0.pi;
                arb.o[1] = n_arb1.pi;
            ]
        }

        template <pint N, width>
        defproc _N_ARB_ (globals g; bool _i[N], _o[N], _pi, _po) {
            // utility for _N_ARB_C
            // N neurons
            [ N = 1 ->
                _i[0] = _po;
                _o[0] = _pi;
            [] N > 1 ->
                bool _ao[2], ao[2], po;
                _N_ARB_<N/2> _n_arb0(g, _i[0..N/2-1], _o[0..N/2-1], _ao[0],);
                _N_ARB_<N-N/2> _n_arb1(g, _i[N/2..N-1], _o[N/2..N-1], _ao[1],);
                _ARB _arb(g,,);
                _arb._i[0] = _n_arb0._po;
                _arb._i[1] = _n_arb1._po;
                prs<g.Vdd, g.GND> {
                   ~_arb._o[0] & ~ao[1] | ~_arb._o[1] & ~ao[0] -> po+
                   g.pReset | _arb._o[0] & ao[0] | _arb._o[1] & ao[1] -> po-

                   ~_pi & ~_arb._o[0] & ~ao[1] -> ao[0]+
                   _pi -> ao[0]-

                   ~_pi & ~_arb._o[1] & ~ao[0] -> ao[1]+
                   _pi -> ao[1]-

                   po => _po-
                   ao[0] => _ao[0]-
                   ao[1] => _ao[1]-
                }
            ]
        }
        
        export
        template <pint N, width>
        defproc _N_ARB (globals g; bool _i[N], _o[N]) {
            // cheap active-low N-way arbiter
            [ N = 1 ->
                _i[0] = _o[0];
            [] N > 1 ->
                _N_ARB_<N/2> _n_arb0(g, _i[0..N/2-1], _o[0..N/2-1],,);
                _N_ARB_<N-N/2> _n_arb1(g, _i[N/2..N-1], _o[N/2..N-1],,);
                _ARB _arb(g,,);
                _arb._i[0] = _n_arb0._po;
                _arb._i[1] = _n_arb1._po;
                _arb._o[0] = _n_arb0._pi;
                _arb._o[1] = _n_arb1._pi;
            ]
        }

        namespace test {
            export
            template <pint N>
            defproc TEST_N_ARB_C (globals g) {
                //tests N_ARB_C
                active_handshaker<N> c(g,,);
                N_ARB<N, 1> n_arb(g, c.o, c.i);
            }

            export
            template <pint N>
            defproc TEST__N_ARB_C (globals g) {
                //tests _N_ARB_C
                _active_handshaker<N> _c(g,,);
                _N_ARB<N, 1> _n_arb(g, _c._o, _c._i);
            }
        } // namespace test
    } // namespace n_arb_c

    namespace n_arb_s {
        // standard, unpipelined n-way arbiter
        template <pint width>
        defproc MU_EX (globals g; bool _ci[2], co[2], qi[2], qo[2]) {
            // grants mutual exclusion between two requesting signals
            _ARB _arb(g, _ci,);
            qi = co;
            [ ~LAYOUT ->
                prs {
                    ~co[1] & ~_arb._o[0] -> qo[0]+
                    co[1] | _arb._o[0] -> qo[0]-
                    ~co[0] & ~_arb._o[1] -> qo[1]+
                    co[0] | _arb._o[1] -> qo[1]-
                }
            [] LAYOUT ->
                prs {
                    ~co[1]<4.5*width> & ~_arb._o[0]<4.5*width> -> qo[0]+
                    ~co[0]<4.5*width> & ~_arb._o[1]<4.5*width> -> qo[1]+
                    co[1]<1.2*width> | _arb._o[0]<1.2*width> -> qo[0]-
                    co[0]<1.2*width> | _arb._o[1]<1.2*width> -> qo[1]-
                }
            ]
        }

        template <pint width>
        defproc PREQ (globals g; bool qi[2], qo[2], pi, _po) {
            // merges mutually exclusive requests into a parent request
            bool _qo[2];
            [ ~LAYOUT ->
                prs<g.Vdd, g.GND> {
                    qi[0] | qi[1] => _po-

                    (: n : 2 :
                        pi & qi[n] -> _qo[n]-
                        ~pi -> _qo[n]+

                        _qo[n] -> qo[n]-
                        ~_qo[n] -> qo[n]+
                    )
                }
            [] LAYOUT ->
                prs<g.Vdd, g.GND> {
                    qi[0]<1.5*width> | qi[1]<1.5*width> -> _po-
                    ~qi[0]<4*width> & ~qi[1]<4*width> -> _po+

                    (: n : 2 :
                        pi<2.4*width> & qi[n]<2.4*width> -> _qo[n]-
                        ~pi<4*width> -> _qo[n]+

                        _qo[n]<1.4*width> -> qo[n]-
                        ~_qo[n]<2.5*width> -> qo[n]+
                    )
                }
            ]
        }

        template <pint N, width>
        defproc N_ARB_ (globals g; bool i[N], o[N], pi, _po) {
            // utility for N_ARB_S
            [ N = 1 ->
                [ ~LAYOUT ->
                    prs <g.Vdd, g.GND> {
                        i[0] => _po-
                    }
                [] LAYOUT ->
                    prs <g.Vdd, g.GND> {
                        i[0]<1.5*width> -> _po-
                        ~i[0]<2.5*width> -> _po+
                    }
                ]
                o[0] = pi;
            [] N > 1 ->
                N_ARB_<N/2, width> n_arb0(g, i[0..N/2-1], o[0..N/2-1],,);
                N_ARB_<N-N/2, width> n_arb1(g, i[N/2..N-1], o[N/2..N-1],,);
                MU_EX<width> mu_ex(g,,,,);
                PREQ<width> preq(g, mu_ex.qo, mu_ex.qi, pi, _po);
                mu_ex._ci[0] = n_arb0._po;
                mu_ex.co[0] = n_arb0.pi;
                mu_ex._ci[1] = n_arb1._po;
                mu_ex.co[1] = n_arb1.pi;
            ]
        }

        export
        template <pint N, width>
        defproc N_ARB (globals g; bool i[N], o[N]) {
            // Standard N-way arbtier as developed in Rajit's notes
            [ N = 1 ->
                i[0] = o[0];
            [] N > 1 ->
                N_ARB_<N/2, width> n_arb0(g, i[0..N/2-1], o[0..N/2-1],,);
                N_ARB_<N-N/2, width> n_arb1(g, i[N/2..N-1], o[N/2..N-1],,);
                _ARB _arb(g,,);
                _arb._i[0] = n_arb0._po;
                _arb._i[1] = n_arb1._po;
                [ ~LAYOUT ->
                    prs<g.Vdd, g.GND> {
                        _arb._o[0] => n_arb0.pi-
                        _arb._o[1] => n_arb1.pi-
                    }
                [] LAYOUT ->
                    prs<g.Vdd, g.GND> {
                        _arb._o[0]<1.4*width> -> n_arb0.pi-
                        ~_arb._o[0]<3*width> -> n_arb0.pi+
                        _arb._o[1]<1.4*width> -> n_arb1.pi-
                        ~_arb._o[1]<3*width> -> n_arb1.pi+
                    }
                ]
            ]
        }

        namespace test {
            export
            template <pint N>
            defproc TEST_N_ARB_S (globals g) {
                //tests N_ARB_S
                active_handshaker<N> c(g,,);
                N_ARB<N, 1> n_arb(g, c.o, c.i);
            }
        } // namespace test
    } // namespace n_arb_s

    namespace n_arb_tree_ring {
        template <pint K>
        defproc PRODUCER_CTRL (globals g; e1of1 p, c[K]; a1of1 s) {
            bool x, _sa, _pe;
            prs<g.Vdd, g.GND> {
                _pe & (|:k:K: c[k].d) -> x-
                ~g._pReset | ~_sa -> x+

                ~x | ~_sa => p.d+

                ~x & ~_pe => s.d+

                p.e => _pe-
                s.a => _sa-
            }
        }

        template <pint K>
        defproc SEQ_RING (globals g; a1of1 sp, sc[K]) {
            sp.d = sc[0].d;
            sc[K-1].a = sp.a;
            (; k : K-1 : sc[k].a = sc[k+1].d;)
        }

        template <pint K>
        defproc PRODUCER (globals g; e1of1 p, c[K]; a1of1 s[K]) {
            PRODUCER_CTRL<K> ctrl(g, p, c,);
            SEQ_RING<K> seq(g, ctrl.s, s);
        }

        export
        defproc CONSUMER (globals g; a1of1 s; e1of1 c) {
            ARB arb(g,,);
            arb.i[0] = c.d;
            arb.i[1] = s.d;
            bool c_ = arb.o[0];
            bool s_ = arb.o[1];
            bool _sta, _sfa;

            prs <g.Vdd, g.GND> {
                c_ & s.d -> _sta-
                ~c_ -> _sta+

                s_ -> _sfa-
                ~s_ -> _sfa+

                _sta | s.d -> c.e-
                ~_sta & ~s.d -> c.e+

                ~_sta | ~_sfa -> s.a+
                _sta & _sfa -> s.a-
            }
        }

        template <pint M, K, N>
        defproc N_ARB_ (globals g; e1of1 p, c[N]) {
            [ M = 0 ->
                N = 1;
                c[0].d = p.d;
                prs<g.Vdd, g.GND> {
                    p.e => c[0].e-
                }
                // c[0] = p;
            [] M >= 1 ->
                PRODUCER<K> prod(g, p,,);
                CONSUMER cons[K];
                N_ARB_<M-1, K, N/K> _[K];
                (; k : K :
                    _[k].g = g;
                    _[k].c = c[k*N/K..(k+1)*N/K-1];
                    cons[k].g = g;
                    cons[k].c = _[k].p;
                    cons[k].s = prod.s[k];
                    prod.c[k] = _[k].p;
                )
            ]
        }

        export
        template <pint M, K, N>
        defproc N_ARB (globals g; e1of1 c[N]) {
            N_ARB_<M, K, N> _(g,, c);
            _.p.d = _.p.e;
            // prs<g.Vdd, g.GND> {
            //     ~_.p.d => _.p.e+
            // }
        }

        namespace test {
            export
            defproc TEST_CONSUMER (globals g) {
                SOURCE_random_a1of1 s(g,);
                SOURCE_random_e1of1 c(g,);
                CONSUMER _(g, s.d, c.d);
            }

            export
            template<pint M, K, N>
            defproc TEST_N_ARB (globals g) {
                // tests N_ARB
                // N=K^M
                N_ARB<M, K, N> n_arb(g,);
                SOURCE_random_e1of1 src[N];
                (; n : N :
                    src[n].g = g;
                    src[n].d = n_arb.c[n];
                )
            }
        } //namespace test
    } // namespace n_arb_tree_ring

    namespace test {
        export
        defproc TEST_ARB (globals g) {
            // tests ARB
            active_handshaker<2> c(g,,);
            ARB arb(g,,);
            
            c.o = arb.i;
            c.i = arb.o;
        }

        export
        defproc TEST__ARB (globals g) {
            // tests _ARB
            _active_handshaker<2> _c(g,,);
            _ARB _arb(g,,);
            
            _c._o = _arb._i;
            _c._i = _arb._o;
        }
    } // end namespace test
} // end namespace arbiter
