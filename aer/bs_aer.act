// This file defines a modified brainstorm aer system that
// uses the serializer defined in the brainstorm repository
// This code only compiles when this aer repository is located
// as a subdirectory of the brainstorm repository, namely in
// brainstorm/act
import "aer/aer/aer.act";
import "aer/aerv/bs_aerv.act";
import "aer/aext/bs_aext.act";
import "core/serializer/AERSerializer.act";
import "lib/channel.act";

export
template <pint M_1of2, M_1of4, p4M, p2M; pint tile_i[p4M/16], tile_j[p4M/16];
          pbool unit_aext>
defproc BS_AER (globals g_bs;
        bool aext_nrn_req[p4M], aext_nrn_ack[p4M];
        bool aext__pp, aext_pe; aer::c1of<4> aext__p;
        bool aerv__pp, aerv__pe; aer::c1of<4> aerv_p;
        aer::a1of2 aerv_syn[p4M/4];
        aer::aMx1of4<4> aerv__mem[p4M/4/4])
        // modified braindrop / brainstorm aer system that uses the 
        // the serializer defined in the brainstorm repository at the top of 
        // the receiver tree
        // and outputs eMx1of2 data from the transmitter to the datapath
        // M depth of AEXT tree (require M > 2)
        //     M_1of4 = 6 in production
        //     M_1of4-1 depth of AERV tree
        // p4M = 4^M neurons
        //     4^(M-1) synapses
        //     4^(M-2) neuron/synapse configuration memories
        // p2M = 2^M = sqrt(p4M) 
        //     L = p2M / 4 tiles per side of the array
        // tile_i maps flat tile indexing to i of 2d ij tile indexing
        // tile_j maps flat tile indexing to j of 2d ij tile indexing
{
    M_1of4*2 = M_1of2; // assert
    [M_1of4<2 -> 0=1;] // assert false
    pint N = 4; // radix of AEXT/AERV tree
    pint M_SPK_1of4 = M_1of4;
    pint M_MEM_1of4 = M_1of4+3;
    pint M_SPK_1of2 = M_SPK_1of4*2;
    pint M_MEM_1of2 = M_MEM_1of4*2;

    aer::globals_w_analog ga;
    compat_bs::globals_w_analog g_to_gbs(ga, g_bs);
    aer::globals g;
    aer::globals_to_globals_w_analog g_to_ga(g, ga);

    aer::transmitter::EDGE_INT<M_SPK_1of4, N>
        aext_e_int(g,, aext__pp,, aext_pe,, aext__p);
    aer::receiver::EDGE_INT<M_SPK_1of4-1, N>
        aerv_e_int(g, aerv__pp,, aerv__pe,, aerv_p,);

    aer::brain_aer::NRN_AER<M_1of4, p4M, p2M, tile_i, tile_j, unit_aext> _(
        ga, aext_nrn_req, aext_nrn_ack,
        aext_e_int.x_phi, aext_e_int.x_enable, aext_e_int.x_data,
        aerv_e_int.y_phi, aerv_e_int.y_enable, aerv_e_int.y_data,
        aerv_syn, aerv__mem
    );
}

export
template <pint M_1of2, M_1of4, p4M, p2M; pint tile_i[p4M/16], tile_j[p4M/16];
          pbool unit_aext>
defproc BS_AER_wrapper (globals g;
                        bool PP_TX, PE_TX; d1of<4> P_TX;
                        bool PP_RX, PE_RX; d1of<4> P_RX;
                        a1of1 AERSOMA[p4M]; // exposed for testing
                        e1of2 AERSYN[p4M/4];
                        eMx1of4<4> AERMEM[p4M/4/4]) {
    // converts to the data types used by the rest of the BS repo

    bool aext__pp = PP_TX;
    bool aext_pe = PE_TX;

    aer::c1of<4> aext__p;
    aext__p.d = P_TX.d;

    bool aerv__pp = PP_RX;
    bool aerv__pe = PE_RX;

    aer::c1of<4> aerv_p;
    aerv_p.d = P_RX.d;

    bool aext_nrn_req[p4M], aext_nrn_ack[p4M];
    (;m:p4M: aext_nrn_req[m] = AERSOMA[m].d; ) // neuron controls req
    (;m:p4M: aext_nrn_ack[m] = AERSOMA[m].a; ) // aer controls ack

    aer::a1of2 aerv_syn[p4M/4];
    (;m:p4M/4: aerv_syn[m].a = AERSYN[m].e; )
    (;m:p4M/4: aerv_syn[m].d = AERSYN[m].d; )

    aer::aMx1of4<4> aerv__mem[p4M/4/4];
    (;m:p4M/4/4:        aerv__mem[m].a = AERMEM[m].e; )
    (;m:p4M/4/4: (;i:4: aerv__mem[m].b[i].d = AERMEM[m].b[i].d; ) )

    BS_AER<M_1of2, M_1of4, p4M, p2M, tile_i, tile_j, unit_aext> _(g,
        aext_nrn_req, aext_nrn_ack, aext__pp, aext_pe, aext__p,
        aerv__pp, aerv__pe, aerv_p, aerv_syn, aerv__mem);
}


export
template <pint M_1of2, M_1of4>
defproc BS_AER_INT (globals g_bs;
                    bool aext__pp, aext_pe; aer::c1of<4> aext__p;
                    aer::eMx1of2<M_1of2> aext_out;
                    bool aerv__pp, aerv__pe; aer::c1of<4> aerv_p;
                    aer::eMx1of2<M_1of2> aerv_spk_in;
                    aer::eMx1of2<M_1of2+6> aerv_mem_in) {
    // Brinstorm AER interface with the datapath
    // contains the AEXT deserializer and the AERV serializer
    M_1of4*2 = M_1of2; // assert
    [M_1of4<2 -> 0=1;] // assert false
    pint N = 4; // radix of AEXT/AERV tree
    pint M_SPK_1of4 = M_1of4;
    pint M_MEM_1of4 = M_1of4+3;
    pint M_SPK_1of2 = M_SPK_1of4*2;
    pint M_MEM_1of2 = M_MEM_1of4*2;

    aer::globals g;
    compat_bs::globals g_to_gbs(g, g_bs);

    BS_AEXT_INT<M_SPK_1of2> aext_int(
        g_bs, aext__pp, aext_pe, aext__p, aext_out);

    BS_AERV_INT<M_SPK_1of2, M_MEM_1of2> aerv_int(g_bs,
        aerv_spk_in, aerv_mem_in,
        aerv__pp, aerv__pe, aerv_p);
}

export
template <pint M_1of2, M_1of4>
defproc BS_AER_INT_wrapper (globals g;
                            bool PP_TX, PE_TX; d1of<4> P_TX;
                            eMx1of2<M_1of2> SPK_TX;
                            bool PP_RX, PE_RX; d1of<4> P_RX;
                            eMx1of2<M_1of2> SPK_RX; eMx1of2<M_1of2+6> MEM_RX) {
    // converts to data types used by the rest of the BS repo

    bool aext__pp = PP_TX;
    bool aext_pe = PE_TX;

    aer::c1of<4> aext__p;
    aext__p.d = P_TX.d;

    aer::eMx1of2<M_1of2> aext_out;
    (;m:M_1of2: aext_out.m[m].d = SPK_TX.b[m].d;)
    aext_out.e = SPK_TX.e;

    bool aerv__pp = PP_RX;
    bool aerv__pe = PE_RX;

    aer::c1of<4> aerv_p;
    aerv_p.d = P_RX.d;

    aer::eMx1of2<M_1of2> aerv_spk_in;
    (;m:M_1of2: aerv_spk_in.m[m].d = SPK_RX.b[m].d;)
    aerv_spk_in.e = SPK_RX.e;

    aer::eMx1of2<M_1of2+6> aerv_mem_in;
    (;m:M_1of2+6: aerv_mem_in.m[m].d = MEM_RX.b[m].d;)
    aerv_mem_in.e = MEM_RX.e;

    BS_AER_INT<M_1of2, M_1of4> _(g,
        aext__pp, aext_pe, aext__p, aext_out,
        aerv__pp, aerv__pe, aerv_p, aerv_spk_in, aerv_mem_in);
}
