// defines a full transmitter/receiver for 4096 neurons and 1024 synapses
import "aer/aext/aext.act";
import "aer/aerv/bs_aerv.act";
import "aer/interface/interface.act";

defproc Wrap_AEXT(aer::globals g) {
    pint M = 6;
    pint N = 4;
    pint NN = 4096;

    aer::BRAIN_AEXT<M, N, NN> aext(g,,,,,);
    aer::interface::OUT_a1ofN<N> out(g, aext.pp, aext.pi, aext.p,);
    aer::interface::DESERIAL_RING<M, N, false, true> deserial(g, out.y,);
}

defproc Wrap_AERV(aer::globals g) {
    pint M_1of2 = 10;
    pint M_1of4 = 5;
    pint Mp4 = 1024;
    pint M_SPK_1of2 = 12;
    pint M_SPK_1of4 = 6;
    pint M_MEM_1of2 = 18;
    pint M_MEM_1of4 = 9;
    pint N_SYN = 1024;
    pint N_MEM = 256;
    pbool flip_mem_out = true;

    BS_AERV<M_1of2, M_1of4, Mp4, M_SPK_1of2, M_SPK_1of4, M_MEM_1of2, M_MEM_1of4,
            N_SYN, N_MEM, flip_mem_out>
        aerv(g,,,,);
    // might have to include a bit more of the memory periphery
    // 1of4 to 1of2 converter
    // valid/neutral check on last row word
}

export defproc Wrapper(aer::globals_np g_np)
{
    bool Vdd;
    bool GND;
    bool vpsub;
    bool vnsub;
    aer::globals g;

    // rails and reset
    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    g_np.sReset = g.sReset;
    g_np.pReset = g.pReset;
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    Wrap_AEXT aext(g);
    Wrap_AERV aerv(g);
}

Wrapper dut;

