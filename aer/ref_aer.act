// This file defines an address-event representation system
import aer/aext/ref_aext.act";
import aer/aerv/ref_aerv.act";
import aer/interface/ref_interface.act";

export
template <pint M, N, NN>
defproc AER_NODATA (globals g; bool xp[NN], xo[NN], yi[NN], yp[NN]) {
    // address-event representation tranceiver
    // no data sent to receiving neuron
    // packets are serialized 
    // Uses M 1-of-N encoding
    // M groups
    // N items per group
    // NN=N^M
    AEXT<M, N, NN> aext(g, xp, xo,,,);
    AERV_NODATA<M, N, NN> aerv(g, yi, yp,,,);
    interface::OUT_a1ofN<N> out(g, aext.pp, aext.pi, aext.p,);
    interface::DESERIAL_RING<M, N> deserial(g, out.y,);
    interface::SERIAL_RING<M, N> serial(g, deserial.y, aerv.po, aerv.pp, aerv.p);
}
