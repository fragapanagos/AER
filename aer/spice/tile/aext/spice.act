// Spice the AEXT portion of the braindrop / brainstorm AER system
import "aer/aer/aer.act";
import "aer/lib/test.act";

namespace aer {

export defproc Wrapper(globals_np g_np; a1of<1> nrn_src[16]; eMx1of4<2> aext_snk)
{
    bool Vdd;
    bool GND;
    bool vpsub;
    bool vnsub;
    globals g;

    // rails and reset
    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    prs <Vdd, GND> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    pint M=2;
    pint NN=16;
    pint N_SYN=4;
    pint M_SPK=2;
    pint M_MEM=4;
    pint D=4;
    
    // tile
    bool nrn_req[NN];
    bool nrn_ack[NN];
    (; nn : NN :
      nrn_req[nn] = nrn_src[nn].d[0];
      nrn_ack[nn] = nrn_src[nn].a;
    )
    brain_aer::TILE_AER<false> tile(g,,,,,,, nrn_req, nrn_ack,,,);

    tile.aerv__pp = g.Vdd;
    (; d : D : tile.aerv_p.d[d] = g.GND;)
    (; n : N_SYN : tile.syn_spk[n].a = g.GND;)
    tile._mem.a = g.GND;
    
    // interface
    transmitter::EDGE_INT<M, D>
        e_int(g, tile.aext_pp,, tile.aext_pe,, tile.aext_p,);
    brain_transmitter::AEXT_INT<M, D>
        a_int(g, e_int.y_phi, e_int.y_enable, e_int.y_data,);
    (; m : M :
        (; d : D :
            a_int.y_spk.m[m].d[d] = aext_snk.m[m].d[d];
        )
    )
    a_int.y_spk.e = aext_snk.e;
} // defproc Wrapper

} // namespace aer

aer::Wrapper dut;
