// unit test that the braindrop/brainstorm aer system can send packets to memory
import "aer/aer/bs_aer.act";
import "aer/lib/test.act";
import "aer/lib/compat_bs.act";
pint M=4;
pint p4M=256; // = 4^M
pint p2M=16; // = 2^M
pint N=4;
pint NN=p4M; // NN=N^M
pint M_1of4 = M;
pint M_AEXT_SPK_1of4=M;
pint M_AEXT_SPK_1of2=M_AEXT_SPK_1of4*2;
pint M_AERV_SPK_1of4=M;
pint M_AERV_MEM_1of4=M+3;
pint M_AERV_SPK_1of2=M_AERV_SPK_1of4*2;
pint M_AERV_MEM_1of2=M_AERV_MEM_1of4*2;
pint N_MEM=NN/N/N;
#SCRIPT pint tile_i[p4M/16];
#SCRIPT pint tile_j[p4M/16];

globals g_bs;
aer::globals g;
compat_bs::globals g_to_gbs(g, g_bs);
bool Reset = g.sReset;

aer::SINK_eMx1of2<M_AEXT_SPK_1of2> aext_snk(g,);

aer::test::SOURCE_BRAIN_AERV<M, 1, 0, 2> aerv_spk_src(g,);
aer::eMx1of2<M_AERV_MEM_1of2> aerv_mem_src;

aer::eMx1of4_to_eMx1of2<M_AERV_SPK_1of4, M_AERV_SPK_1of2> aerv_spk_src_4to2(
    g, aerv_spk_src.d,);

aer::aMx1of4<M_AERV_MEM_1of4-M_1of4+1> _mem[N_MEM];
aer::eMx1of4<M_AERV_MEM_1of4-M_1of4+1> mem_dat[N_MEM];
(; nm : N_MEM :
    prs {
        (: m : M :
            (: n : N :
                [after=0] _mem[nm].m[m].n[n] => mem_dat[nm].m[m].n[n]-
            )
        )
        [after=0] _mem[nm].a => mem_dat[nm].e-
    }
)

BS_AER<M*2, M, p4M, p2M, tile_i, tile_j, false> aer(g_bs,,,,,,,,,, _mem);

BS_AER_INT<M*2, M> aer_int(g_bs,
    aer.aext_pp, aer.aext_pe, aer.aext_p, aext_snk.d,
    aer.aerv_pp, aer.aerv_pe, aer.aerv_p, aerv_spk_src_4to2.y, aerv_mem_src);
