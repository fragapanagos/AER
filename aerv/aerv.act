// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer/interface/interface.act";

namespace aer {

namespace receiver {
    template <pint D, N_SYN, N_MEM>
    defproc LEAF_ (globals g; bool _pp, _pe; c1of<D> p;
        bool cp_mem[N_MEM],
        ce_syn[N_SYN], ce_mem[N_MEM];
        c1of2 c_syn[N_SYN]; c1of<D> c_mem[N_MEM])
        // AERV tree LEAF supports {synapse, memory} port types
        // D 1-of-D data
        // N_SYN synapses
        // N_MEM memory ports
    {
        pint SYN_PPORT = D / 2; // synapses per port
        // synapses receive 1-of-2 data, so multiple synapses can be packed on
        // a single port
        pint N_SYN_PORT = N_SYN / SYN_PPORT; // synapse ports
        pint F = N_SYN_PORT + N_MEM; // fanout
        [ F > D ->
            1=0; // assert false
        ]

        bool __pp, _u_syn[N_SYN_PORT], _u_mem[N_MEM], uu, _uu, v, _v;
        bool cp_syn[N_SYN_PORT];
        c1of2 _c_syn[N_SYN];
        c1of<D> _c_mem[N_MEM];
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (|:n:N_SYN_PORT: ~_u_syn[n]) | (|:n:N_MEM: ~_u_mem[n]) => uu+

                uu => _uu-

                __pp & _uu |
                    (|:n:N_SYN_PORT: cp_syn[n] &
                        (&:s:SYN_PPORT: (&:d:2: _c_syn[n*SYN_PPORT+s].d[d]))) |
                    (|:n:N_MEM: ce_mem[n]) => _pe-

                v => _v-
                
                (: n : N_SYN_PORT :
                    p.d[n] & _v -> _u_syn[n]-
                    ~__pp -> _u_syn[n]+
                    ~_v & ~_u_syn[n] => cp_syn[n]+
                )
                (: n : N_MEM :
                    p.d[n+N_SYN_PORT] & _v -> _u_mem[n]-
                    ~__pp -> _u_mem[n]+
                    ~_v & ~_u_mem[n] => cp_mem[n]+
                )

                ~_uu & (& : f : F : ~p.d[f]) -> v+
                _uu -> v-

                (: n : N_SYN_PORT :
                    (: nn : SYN_PPORT :
                        (: d : 2 :
                            p.d[nn*SYN_PPORT+d] & 
                                cp_syn[n] &
                                ce_syn[n*SYN_PPORT+nn] -> 
                                _c_syn[n*SYN_PPORT+nn].d[d]-
                            ~g._pReset | ~p.d[nn*SYN_PPORT+d] &
                                ~ce_syn[n*SYN_PPORT+nn] -> 
                                _c_syn[n*SYN_PPORT+nn].d[d]+
                        )
                    )
                )

                (: n : N_MEM :
                    (: d : D :
                        p.d[d] & cp_mem[n] => _c_mem[n].d[d]-
                    )
                )
            }
            // inverters for interfaces
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                _pp => __pp-

                (: n : N_SYN :
                    (: d : 2 :
                        _c_syn[n].d[d] => c_syn[n].d[d]-
                    )
                )

                (: n : N_MEM :
                    (: d : D :
                        _c_mem[n].d[d] => c_mem[n].d[d]-
                    )
                )
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (|:n:N_SYN_PORT: ~_u_syn[n]<9>) | (|:n:N_MEM: ~_u_mem[n]<9>) ->
                    uu+
                (&:n:N_SYN_PORT: _u_syn[n]<18>) & (&:n:N_MEM: _u_mem[n]<18>) ->
                    uu-

                ~uu<9> -> _uu+
                uu<6> -> _uu-

                __pp<12> & _uu<12> |
                    (|:n:N_SYN_PORT: cp_syn[n]<18> & (&:s:SYN_PPORT:
                        (&:d:2: _c_syn[n*SYN_PPORT+s].d[d]<18>))) |
                    (|:n:N_MEM: ce_mem[n]<6>) -> _pe-
                (~__pp<27> | ~_uu<27>) &
                    (&:n:N_SYN_PORT: ~cp_syn[n]<27> | (|:s:SYN_PPORT:
                        (|:d:2: ~_c_syn[n*SYN_PPORT+s].d[d]<27>))) &
                    (&:n:N_MEM: ~ce_mem[n]<27>) -> _pe+

                ~v<9> -> _v+
                v<6> -> _v-
                
                (: n : N_SYN_PORT :
                    p.d[n]<12> & _v<12> -> _u_syn[n]-
                    ~__pp<9> -> _u_syn[n]+

                    ~_v<18> & ~_u_syn[n]<18> -> cp_syn[n]+
                    _v<6> | _u_syn[n]<6> -> cp_syn[n]-
                )
                (: n : N_MEM :
                    p.d[n+N_SYN_PORT]<12> & _v<12> -> _u_mem[n]-
                    ~__pp<9> -> _u_mem[n]+

                    ~_v<18> & ~_u_mem[n]<18> -> cp_mem[n]+
                    _v<6> | _u_mem[n]<6> -> cp_mem[n]-
                )

                ~_uu<18> & (& : f : F : ~p.d[f]<18>) -> v+
                _uu<6> -> v-

                (: n : N_SYN_PORT :
                    (: nn : SYN_PPORT :
                        (: d : 2 :
                            p.d[nn*SYN_PPORT+d]<18> &
                                cp_syn[n]<18> &
                                ce_syn[n*SYN_PPORT+nn]<18> ->
                                _c_syn[n*SYN_PPORT+nn].d[d]-
                            ~g._pReset<9> | ~p.d[nn*SYN_PPORT+d]<18> &
                                ~ce_syn[n*SYN_PPORT+nn]<18> ->
                                _c_syn[n*SYN_PPORT+nn].d[d]+
                        )
                    )
                )

                (: n : N_MEM :
                    (: d : D :
                        p.d[d]<6> & cp_mem[n]<6> -> _c_mem[n].d[d]-
                        ~p.d[d]<9> | ~cp_mem[n]<9> -> _c_mem[n].d[d]+
                    )
                )
            }
            // inverters for interfaces
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                _pp<6> -> __pp-
                ~_pp<9> -> __pp+

                (: n : N_SYN :
                    (: d : 2 :
                        _c_syn[n].d[d]<6> -> c_syn[n].d[d]-
                        ~_c_syn[n].d[d]<9> -> c_syn[n].d[d]+
                    )
                )

                (: n : N_MEM :
                    (: d : D :
                        _c_mem[n].d[d]<6> -> c_mem[n].d[d]-
                        ~_c_mem[n].d[d]<9> -> c_mem[n].d[d]+
                    )
                )
            }
        ]
    }

    template <pint N>
    defproc NODE_ (globals g; bool _pp, _pe, _ce[N], _cp[N]; c1of<N> p, c[N]) 
        // node in AERV tree
        // N fanout (radix)
    {
        bool u[N], _u[N], uu, _v, __v, pe;
        c1of<N> _p;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    u[n] => _u[n]-
                )

                (| : n : N : ~_u[n]) => uu+

                ~_pp & ~uu | (| : n : N : ~_ce[n]) => pe+

                _v => __v-

                (: n : N :
                    p.n[n] => _p.n[n]-
                )

                (: n : N :
                    ~_p.n[n] & ~__v -> u[n]+
                    _pp -> u[n]-
                )

                uu & (& : n : N : _p.n[n]) -> _v-
                ~uu -> _v+

                (: n : N :
                    __v & u[n] => _cp[n]-
                )

                (: np : N :
                    (: nc : N :
                        ~_p.n[np] & ~_cp[nc] => c[nc].n[np]+
                    )
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                pe => _pe-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    ~u[n]<9> -> _u[n]+
                    u[n]<6> -> _u[n]-
                )

                (| : n : N : ~_u[n]<12>) -> uu+
                (& : n : N : _u[n]<15>) -> uu-

                ~_pp<27> & ~uu<27> | (| : n : N : ~_ce[n]<27>) -> pe+
                (_pp<18> | uu<18>) & (& : n : N : _ce[n]<18>) -> pe-

                ~_v<15> -> __v+
                _v<9> -> __v-

                (: n : N :
                    ~p.n[n]<12> -> _p.n[n]+
                    p.n[n]<9> -> _p.n[n]-
                )

                (: n : N :
                    ~_p.n[n]<18> & ~__v<18> -> u[n]+
                    _pp<6> -> u[n]-
                )

                uu<18> & (& : n : N : _p.n[n]<18>) -> _v-
                ~uu<18> -> _v+

                (: n : N :
                    ~__v<12> | ~u[n]<12> -> _cp[n]+
                    __v<15> & u[n]<15> -> _cp[n]-
                )

                (: np : N :
                    (: nc : N :
                        ~_p.n[np]<18> & ~_cp[nc]<18> -> c[nc].n[np]+
                        _p.n[np]<6> | _cp[nc]<6> -> c[nc].n[np]-
                    )
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~pe<12> -> _pe+
                pe<9> -> _pe-
            }
        ]
    }

    template <pint N>
    defproc LEAF_NODATA_ (globals g; bool pp, pe, ce[N], cp[N]; c1of<N> p)
        // AERV tree LEAF that does not transmit data
        // N clients
    {
        bool u, _pe, _ce[N], _cp[N];
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            (: n : N :
                ce[n] => _ce[n]-
            )

            pp & (& : n : N : _ce[n]) | u => _pe-

            (: n : N :
                p.d[n] -> _cp[n]-
                ~pp -> _cp[n]+
            )

            (| : n : N : ~_ce[n] & ~p.d[n]) => u+
        }
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            (: n : N :
                _cp[n] => cp[n]-
            )

            _pe => pe-
        }
    }

    namespace repeaters {
        // Repeater and Node Structure:
        //     array edge -> REPEATERS_P<4> ->
        //         REPEATERS_M<4> ->
        //     REPEATERS_C<4> -> NODE_LVL3 -> REPEATERS_P<3> ->
        //         REPEATERS_M<3> ->
        //     REPEATERS_C<3> -> NODE_LVL2 -> REPEATERS_P<2> ->
        //         REPEATERS_M<2> ->
        //     REPEATERS_C<2> -> NODE_LVL1 -> REPEATERS_P<1> ->
        //         REPEATERS_M<1> ->
        //     REPEATERS_C<1> -> NODE_LVL0 -> REPEATERS_P<0> ->
        //         REPEATERS_M<0> ->
        //     REPEATERS_C<0> -> LEAF
        // .----------------------------------------------------------.
        // | Repeater specifications                                  |
        // .----------------------------------------------------------.
        // |                 link  | S              | CAP             |
        // |-----------------------|----------------|-----------------|
        // | array edge -- node[3] | {3, 10, 6, 36} | {4, 64, 4, 192} |
        // | node[3]    -- node[2] | {3, 10, 6, 36} | {4, 64, 4, 192} |
        // | node[2]    -- node[1] | {3, 10, 6, 36} | {4, 64, 4, 64}  |
        // | node[1]    -- node[0] | {3, 10}        | {4, 64}         |
        // | node[0]    -- leaf    | {3, 10}        | {4, 32}         |
        // ------------------------------------------------------------
        export
        template <pint M_idx, N>
        defproc REPEATERS_P(globals g;
            bool p__cp, phi_pm; 
            bool p__ce, enable_pm; 
            c1of<N> p_c, data_pm)
            // Repeaters grouped in the parent node cutout
        {
            pint Mmax = 5; // max AERV tree level
            [M_idx >= Mmax -> 0=1;] // assert false
            pint S[2], C[Mmax][2];
            // sizing per repeater per stage (bottom to top in tree)
            S = {3, 10};
            // cap per repeater per stage (bottom to top in tree)
            C = {{4, 32}, {4, 64}, {4, 64}, {4, 64}, {4, 64}};

            REPEATER_BOOL<2, S, C[M_idx][0..1]> repeaters_phi(g, p__cp, phi_pm);
            p__ce = enable_pm;
            REPEATER_c1of<N, 2, S, C[M_idx][0..1]> repeater_data(g, p_c, data_pm);
        }

        namespace mid {
            export
            template <pint M_idx, N>
            defproc REPEATERS_M_PHI_DATA(globals g;
                bool phi_pm, phi_mc; 
                c1of<N> data_pm, data_mc)
                // Repeaters grouped in the dedicated repeaters cutout
            {
                pint Mmax = 5; // max AERV tree level
                [M_idx >= Mmax -> 0=1;] // assert false
                pint S[Mmax][2], C[Mmax][2];
                // sizing per repeater per stage (bottom to top in tree)
                S = {{0, 0 }, {0, 0 }, {6, 36},
                     {6, 36}, {6, 36}};
                // cap per repeater per stage (bottom to top in tree)
                C = {{0, 0  }, {0, 0  }, {4, 64 },
                     {4, 192}, {4, 192}};

                [ M_idx < 2 ->
                    phi_pm = phi_mc; 
                    data_pm = data_mc;
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
                [] M_idx >= 2 ->
                    REPEATER_BOOL<2, S[M_idx][0..1], C[M_idx][0..1]>
                        repeaters_phi(g, phi_pm, phi_mc);
                    REPEATER_c1of<N, 2, S[M_idx][0..1], C[M_idx][0..1]>
                        repeater_data(g, data_pm, data_mc);
                ]
            }

            export
            template <pint M_idx, N>
            defproc REPEATERS_M_ENABLE(globals g; bool enable_pm, enable_mc) {
                // Repeaters grouped in the dedicated repeaters cutout
                pint Mmax = 5; // max AERV tree level
                [M_idx >= Mmax -> 0=1;] // assert false
                pint S[Mmax][2], C[Mmax][2];
                // sizing per repeater per stage (bottom to top in tree)
                S = {{0, 0 }, {0, 0 }, {6, 36},
                     {6, 36}, {6, 36}};
                // cap per repeater per stage (bottom to top in tree)
                C = {{0, 0  }, {0, 0  }, {4, 64 },
                     {4, 192}, {4, 192}};

                [ M_idx < 2 ->
                    enable_pm = enable_mc; 
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
                [] M_idx >= 2 ->
                    REPEATER_BOOL<2, S[M_idx][0..1], C[M_idx][0..1]>
                        repeaters_en(g, enable_mc, enable_pm);
                ]
            }
        } // namespace mid

        export
        template <pint M_idx, N>
        defproc REPEATERS_M(globals g;
                bool phi_pm, phi_mc; 
                bool enable_pm, enable_mc; 
                c1of<N> data_pm, data_mc)
                // Repeaters grouped in the dedicated repeaters cutout
        {
            mid::REPEATERS_M_PHI_DATA<M_idx, N>
                repeaters_m_phi_data(g, phi_pm, phi_mc, data_pm, data_mc);
            mid::REPEATERS_M_ENABLE<M_idx, N>
                repeaters_m_enable(g, enable_pm, enable_mc);
        }

        export
        template <pint M_idx, N>
        defproc REPEATERS_C(globals g;
            bool phi_mc, c__pp; 
            bool enable_mc, c__pe; 
            c1of<N> data_mc, c_p)
            // Repeaters grouped in the child node cutout
        {
            pint Mmax = 5; // max AERV tree level
            [M_idx >= Mmax -> 0=1;] // assert false
            pint S[2], C[Mmax][2];
            // sizing per repeater per stage (bottom to top in tree)
            S = {3, 10};
            // cap per repeater per stage (bottom to top in tree)
            C = {{4, 32}, {4, 64}, {4, 64},
                 {4, 64}, {4, 64}};
            phi_mc = c__pp;
            REPEATER_BOOL<2, S, C[M_idx][0..1]> repeaters_en(g, c__pe, enable_mc);
            data_mc = c_p;
        }
    } // namespace repeaters

    export
    template <pint N>
    defproc LEAF_NODATA (globals g; bool pp, pe, ce[N], cp[N]; c1of<N> p)
        // LEAF that does not transmit data 
        // with repeaters in the same physical tile
        // N clients
    {
        repeaters::REPEATERS_C<0, N> rep_c(g,,,,,,);
        rep_c.phi_mc = pp;
        rep_c.enable_mc = pe;
        rep_c.data_mc = p;

        LEAF_NODATA_<N> _(g,,, ce, cp,);
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                rep_c.c__pp => _.pp-
                _.pe => rep_c.c__pe-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~rep_c.c__pp<9> -> _.pp+
                rep_c.c__pp<6> -> _.pp-

                ~_.pe<9> => rep_c.c__pe+
                _.pe<6> => rep_c.c__pe-
            }
        ]
        _.p   = rep_c.c_p;
    }

    export
    template <pint D, N_SYN, N_MEM>
    defproc LEAF (globals g; bool _pp, _pe; c1of<D> p;
        bool cp_mem[N_MEM],
        ce_syn[N_SYN], ce_mem[N_MEM];
        c1of2 c_syn[N_SYN]; c1of<D> c_mem[N_MEM])
        // LEAF with repeaters in the same physical tile
        // D 1-of-D data
        // N_SYN synapses
        // N_MEM memory ports
    {
        repeaters::REPEATERS_C<0, D> rep_c(g,,,,,,);
        rep_c.phi_mc = _pp;
        rep_c.enable_mc = _pe;
        rep_c.data_mc = p;

        LEAF_<D, N_SYN, N_MEM> _(g,,,, cp_mem, ce_syn, ce_mem, c_syn, c_mem);
        _._pp = rep_c.c__pp;
        _._pe = rep_c.c__pe;
        _.p   = rep_c.c_p;
    }

    export
    template <pint M_IDX, N>
    defproc NODE (globals g; bool _pp, _pe, _ce[N], _cp[N]; c1of<N> p, c[N]) 
        // NODE with repeaters in the same physical tile
        // M_idx [1-4] level in AERV tree of NODE
        // N fanout (radix)
    {
        [M_IDX<1 | M_IDX>4 -> 0=1;] // assert false
        repeaters::REPEATERS_P<M_IDX-1, N> rep_p[N];
        (; n : N :
            rep_p[n].g = g;
            rep_p[n].phi_pm = _cp[n];
            rep_p[n].enable_pm = _ce[n];
            rep_p[n].data_pm = c[n];
        )

        repeaters::REPEATERS_C<M_IDX, N> rep_c(g,,,,,,);
        rep_c.phi_mc = _pp;
        rep_c.enable_mc = _pe;
        rep_c.data_mc = p;

        NODE_<N> _(g,,,,,,);
        (; n : N :
            _._cp[n] = rep_p[n].p__cp;
            _._ce[n] = rep_p[n].p__ce;
            _.c[n]  = rep_p[n].p_c;
        )
        _._pp = rep_c.c__pp;
        _._pe = rep_c.c__pe;
        _.p   = rep_c.c_p;
    }

    export
    template <pint M_NODE, N, N_NODE, M_STOP>
    defproc NODE_TREE(globals g;
        bool _cp[N_NODE][N], _ce[N_NODE][N]; c1of<N> c[N_NODE][N];
        bool _pp[N_NODE],    _pe[N_NODE];    c1of<N> p[N_NODE]) 
        // tree of NODE
        // M_NODE [1-4] depth of tree (depth of AERV tree - 1)
        // N radix of tree
        // N_NODE number of nodes
        // M_STOP [0-3] 0-indexed bottom level of tree
    {
        [M_NODE>4 | M_NODE<1 -> 1=0;]  // assert false
        [M_STOP>3 | M_STOP<0 -> 1=0;]  // assert false
        pint M_IDX = M_NODE-1;

        pint n_node[M_STOP..M_IDX]; // number of nodes at each level
        pint base_idx[M_STOP..M_IDX];

        n_node[M_IDX] = 1;
        base_idx[M_IDX] = 0;
        (; m : M_IDX-M_STOP :
            n_node[M_IDX-1-m] = n_node[M_IDX-m]*N;
            base_idx[M_IDX-1-m] = base_idx[M_IDX-m]+n_node[M_IDX-m];
        )

        // level 3 NODEs
        [ M_IDX>=3 & M_STOP<=3 -> NODE<4, N> node_3[n_node[3]];
            (; n : n_node[3] :
                node_3[n].g = g;
                node_3[n]._cp = _cp[base_idx[3]+n];
                node_3[n]._ce = _ce[base_idx[3]+n];
                node_3[n].c  = c[base_idx[3]+n];
                node_3[n]._pp = _pp[base_idx[3]+n];
                node_3[n]._pe = _pe[base_idx[3]+n];
                node_3[n].p  = p[base_idx[3]+n];
            )
        ]
        // level 2 NODEs
        [ M_IDX>=2 & M_STOP<=2 -> NODE<3, N> node_2[n_node[2]];
            (; n : n_node[2] :
                node_2[n].g = g;
                node_2[n]._cp = _cp[base_idx[2]+n];
                node_2[n]._ce = _ce[base_idx[2]+n];
                node_2[n].c  = c[base_idx[2]+n];
                node_2[n]._pp = _pp[base_idx[2]+n];
                node_2[n]._pe = _pe[base_idx[2]+n];
                node_2[n].p  = p[base_idx[2]+n];
            )
        ]
        // level 1 NODEs
        [ M_IDX>=1 & M_STOP<=1 -> NODE<2, N> node_1[n_node[1]];
            (; n : n_node[1] :
                node_1[n].g = g;
                node_1[n]._cp = _cp[base_idx[1]+n];
                node_1[n]._ce = _ce[base_idx[1]+n];
                node_1[n].c  = c[base_idx[1]+n];
                node_1[n]._pp = _pp[base_idx[1]+n];
                node_1[n]._pe = _pe[base_idx[1]+n];
                node_1[n].p  = p[base_idx[1]+n];
            )
        ]
        // level 0 NODEs
        [ M_IDX>=0 & M_STOP<=0 -> NODE<1, N> node_0[n_node[0]];
            (; n : n_node[0] :
                node_0[n].g = g;
                node_0[n]._cp = _cp[base_idx[0]+n];
                node_0[n]._ce = _ce[base_idx[0]+n];
                node_0[n].c  = c[base_idx[0]+n];
                node_0[n]._pp = _pp[base_idx[0]+n];
                node_0[n]._pe = _pe[base_idx[0]+n];
                node_0[n].p  = p[base_idx[0]+n];
            )
        ]
    }

    export
    template <pint M, N, N_LINK, M_STOP>
    defproc REPEATER_M_TREE(globals g;
        bool phi_pm[N_LINK], phi_mc[N_LINK];
        bool enable_pm[N_LINK], enable_mc[N_LINK];
        c1of<N> data_pm[N_LINK], data_mc[N_LINK]) 
        // tree of REPEATERS_M
        // M [1-5] depth of tree (depth of AERV tree)
        // N radix of tree
        // N_LINK number of repeater links
        // M_STOP [0-5] 0-indexed bottom level of tree
        // Does not include the root level mid-level repeater
        //     which is provided by TOP_INT
    {
        [M>5 | M<1 -> 1=0;]  // assert false
        [M_STOP>4 | M_STOP<0 -> 1=0;]  // assert false
        pint M_IDX = M-1;

        pint n_rep[M_STOP..M_IDX]; // number of rep at each level
        pint base_idx[M_STOP..M_IDX];

        n_rep[M_IDX] = 1;
        base_idx[M_IDX] = 0;
        (; m : M_IDX-M_STOP :
            n_rep[M_IDX-1-m] = n_rep[M_IDX-m]*N;
            base_idx[M_IDX-1-m] = base_idx[M_IDX-m]+n_rep[M_IDX-m];
        )

        // skip root node, which will live in TOP_INT
        phi_mc[0] = phi_pm[0];
        enable_mc[0] = enable_pm[0];
        data_mc[0] = data_pm[0];

        // level 4 repeaters never get created (provided by TOP_INT)
        // level 3 repeaters; create if depth 5
        [ M_IDX>=4 & M_STOP<=3 -> repeaters::REPEATERS_M<3, N> rep_3[n_rep[3]];
            (; n : n_rep[3] :
                rep_3[n].g = g;
                rep_3[n].phi_pm = phi_pm[base_idx[3]+n];
                rep_3[n].phi_mc = phi_mc[base_idx[3]+n];
                rep_3[n].enable_pm = enable_pm[base_idx[3]+n];
                rep_3[n].enable_mc = enable_mc[base_idx[3]+n];
                rep_3[n].data_pm = data_pm[base_idx[3]+n];
                rep_3[n].data_mc = data_mc[base_idx[3]+n];
            )
        ]
        // level 2 repeaters; create if depth 4
        [ M_IDX>=3 & M_STOP<=2 -> repeaters::REPEATERS_M<2, N> rep_2[n_rep[2]];
            (; n : n_rep[2] :
                rep_2[n].g = g;
                rep_2[n].phi_pm = phi_pm[base_idx[2]+n];
                rep_2[n].phi_mc = phi_mc[base_idx[2]+n];
                rep_2[n].enable_pm = enable_pm[base_idx[2]+n];
                rep_2[n].enable_mc = enable_mc[base_idx[2]+n];
                rep_2[n].data_pm = data_pm[base_idx[2]+n];
                rep_2[n].data_mc = data_mc[base_idx[2]+n];
            )
        ]
        // level 1 repeaters; create if depth 3
        [ M_IDX>=2 & M_STOP<=1 -> repeaters::REPEATERS_M<1, N> rep_1[n_rep[1]];
            (; n : n_rep[1] :
                rep_1[n].g = g;
                rep_1[n].phi_pm = phi_pm[base_idx[1]+n];
                rep_1[n].phi_mc = phi_mc[base_idx[1]+n];
                rep_1[n].enable_pm = enable_pm[base_idx[1]+n];
                rep_1[n].enable_mc = enable_mc[base_idx[1]+n];
                rep_1[n].data_pm = data_pm[base_idx[1]+n];
                rep_1[n].data_mc = data_mc[base_idx[1]+n];
            )
        ]
        // level 0 repeaters; create if depth 2
        [ M_IDX>=1 & M_STOP<=0 -> repeaters::REPEATERS_M<0, N> rep_0[n_rep[0]];
            (; n : n_rep[0] :
                rep_0[n].g = g;
                rep_0[n].phi_pm = phi_pm[base_idx[0]+n];
                rep_0[n].phi_mc = phi_mc[base_idx[0]+n];
                rep_0[n].enable_pm = enable_pm[base_idx[0]+n];
                rep_0[n].enable_mc = enable_mc[base_idx[0]+n];
                rep_0[n].data_pm = data_pm[base_idx[0]+n];
                rep_0[n].data_mc = data_mc[base_idx[0]+n];
            )
        ]

        [ M_IDX<=M_STOP ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
        ]
    }

    export
    template <pint M, N>
    defproc TOP_INT (globals g;
        bool x_phi, y_phi;
        bool x_enable, y_enable;
        c1of<N> x_data, y_data)
        // interface at the top of the AERV tree (including repeater tree)
        // converts between active low and high senses
    {
        repeaters::REPEATERS_P<M-1, N> rep_p(g,,,,,,);
        // convert between active high and low
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            ~x_phi<9> -> rep_p.p__cp+
            x_phi<6> -> rep_p.p__cp-

            ~rep_p.p__ce<9> -> x_enable+
            rep_p.p__ce<6> -> x_enable-
        }
        x_data = rep_p.p_c;

        repeaters::REPEATERS_M<M-1, N> rep_m(g,,,,,,);
        rep_p.phi_pm = rep_m.phi_pm;
        rep_p.enable_pm = rep_m.enable_pm;
        rep_p.data_pm = rep_m.data_pm;
        rep_m.phi_mc = y_phi;
        rep_m.enable_mc = y_enable;
        rep_m.data_mc = y_data;
    }
} // namespace receiver

export
template <pint M, N, pNM, N_SYN, N_MEM>
defproc AERV (globals g;
    bool _pp, _pe; c1of<N> p;
    e1of2 syn[N_SYN]; bool yp_mem[N_MEM], ye_mem[N_MEM]; c1of<N> mem[N_MEM])
    // receiver capable of sending data to neuron
    // M tree levels
    // N 1-of-N data and fanout for intermediate nodes
    // pNM = N^M potential LEAF output ports
    // N_SYN synapses
    // N_MEM memories
{
    pint SYN_PPORT = N/2;
    pint N_SYN_PORT = N_SYN/SYN_PPORT;
    [(N_SYN_PORT+N_MEM) > pNM -> 0=1;] // assert false
    pint N_LEAF = pNM/N; // = N^(M-1)
    pint N_NODE = (pNM-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    pint N_LINK = N_LEAF + N_NODE; // = (N^M-1) / (N-1)

    pint SYN_PER_LEAF = N_SYN/N_LEAF;
    pint MEM_PER_LEAF = N_MEM/N_LEAF;

    receiver::LEAF<N, N_SYN/N_LEAF, N_MEM/N_LEAF> leaf[N_LEAF];
    (; n : N_LEAF :
        leaf[n].g = g;
        (; ns : SYN_PER_LEAF :
            leaf[n].ce_syn[ns] = syn[n*SYN_PER_LEAF+ns].e;
            leaf[n].c_syn[ns] = syn[n*SYN_PER_LEAF+ns].m;
        )
        (; nm : MEM_PER_LEAF :
            leaf[n].cp_mem[nm] = yp_mem[n*MEM_PER_LEAF+nm];
            leaf[n].ce_mem[nm] = ye_mem[n*MEM_PER_LEAF+nm];
            leaf[n].c_mem[nm] = mem[n*MEM_PER_LEAF+nm];
        )
    )

    receiver::REPEATER_M_TREE<M, N, N_LINK, 0> repeaters_mid(g,,,,,,);
    repeaters_mid.phi_pm[0]    = _pp;
    repeaters_mid.enable_pm[0] = _pe;
    repeaters_mid.data_pm[0]   = p;

    pint LEAF_BASE_IDX = N_NODE; // = N_LINK - N_LEAF
    (; n : N_LEAF :
        leaf[n]._pp = repeaters_mid.phi_mc[LEAF_BASE_IDX+n];
        leaf[n]._pe  = repeaters_mid.enable_mc[LEAF_BASE_IDX+n];
        leaf[n].p  = repeaters_mid.data_mc[LEAF_BASE_IDX+n];
    )

    [ M = 1 ->
        pNM = N; // assert
    [] M > 1 ->
        receiver::NODE_TREE<M-1, N, N_NODE, 0> node(g,,,,,,);

        (; n : N_NODE :
            node._pp[n] = repeaters_mid.phi_mc[n];
            node._pe[n] = repeaters_mid.enable_mc[n];
            node.p[n] = repeaters_mid.data_mc[n];
        )

        (; node_idx : N_NODE :
            (; n : N :
                repeaters_mid.phi_pm[node_idx*N+n+1] = node._cp[node_idx][n];
                repeaters_mid.enable_pm[node_idx*N+n+1] = node._ce[node_idx][n];
                repeaters_mid.data_pm[node_idx*N+n+1] =  node.c[node_idx][n];
            )
        )
    ]
}

export
template <pint M, N, NN>
defproc AERV_NODATA (globals g; bool ye[NN], yp[NN], _pp, _pe; c1of<N> p) 
    // receiver that does not send data to targets
    //     (targets could be synapses or neurons)
    // M depth of AERV tree
    // N radix of AERV tree
    // NN targets = N^M
{
    pint N_LEAF = NN/N; // = N^(M-1)
    pint N_NODE = (NN-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    pint N_LINK = N_NODE+N_LEAF;

    receiver::LEAF_NODATA<N> leaf[N_LEAF];

    (; n : N_LEAF :
        leaf[n].g = g;
        leaf[n].cp = yp[n*N..(n+1)*N-1];
        leaf[n].ce = ye[n*N..(n+1)*N-1];
    )

    receiver::REPEATER_M_TREE<M, N, N_LINK, 0> repeaters_mid(g,,,,,,);
    repeaters_mid.phi_pm[0]    = _pp;
    repeaters_mid.enable_pm[0] = _pe;
    repeaters_mid.data_pm[0]   = p;

    pint LEAF_BASE_IDX = N_NODE; // = N_LINK - N_LEAF
    (; n : N_LEAF :
        leaf[n].pp = repeaters_mid.phi_mc[LEAF_BASE_IDX+n];
        leaf[n].pe  = repeaters_mid.enable_mc[LEAF_BASE_IDX+n];
        leaf[n].p  = repeaters_mid.data_mc[LEAF_BASE_IDX+n];
    )

    [ M = 1 ->
        NN = N; // assert
    [] M > 1 ->
        receiver::NODE_TREE<M-1, N, N_NODE, 0> node(g,,,,,,);

        (; n : N_NODE :
            node._pp[n] = repeaters_mid.phi_mc[n];
            node._pe[n] = repeaters_mid.enable_mc[n];
            node.p[n] = repeaters_mid.data_mc[n];
        )

        (; node_idx : N_NODE :
            (; n : N :
                repeaters_mid.phi_pm[node_idx*N+n+1] = node._cp[node_idx][n];
                repeaters_mid.enable_pm[node_idx*N+n+1] = node._ce[node_idx][n];
                repeaters_mid.data_pm[node_idx*N+n+1] =  node.c[node_idx][n];
            )
        )
    ]
}

export
template <pint M, p4M>
defproc AERV_TO_TILE (globals g;
    bool _pp, _pe; c1of<4> p;
    bool _cp[p4M/4], _ce[p4M/4]; c1of<4> c[p4M/4])
    // AERV tree above the TILE (in logic space)
    // contains all of the intermediate NODEs
    // M tree levels
    // p4M = 4^M potential LEAF output ports
{
    pint N = 4; // required for TILE
    pint N_NODE = (p4M-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    pint N_LEAF = p4M/N; // = N^(M-1)
    pint N_LINK = N_LEAF + N_NODE; // = (N^M-1) / (N-1)

    receiver::REPEATER_M_TREE<M, N, N_LINK, 0> repeaters_mid(g,,,,,,);
    // connect to root ports
    repeaters_mid.phi_pm[0]    = _pp;
    repeaters_mid.enable_pm[0] = _pe;
    repeaters_mid.data_pm[0]   = p;

    // connect to leaf ports
    pint BASE_REP_IDX = N_NODE;
    (; n : BASE_REP_IDX..N_LINK-1 :
        repeaters_mid.phi_mc[n] = _cp[n-BASE_REP_IDX];
        repeaters_mid.enable_mc[n] = _ce[n-BASE_REP_IDX];
        repeaters_mid.data_mc[n] = c[n-BASE_REP_IDX];
    )

    [ M = 1 ->
        p4M = 4; // assert
    [] M > 1 ->
        receiver::NODE_TREE<M-1, N, N_NODE, 0> node(g,,,,,,);

        (; n : N_NODE :
            node._pp[n] = repeaters_mid.phi_mc[n];
            node._pe[n] = repeaters_mid.enable_mc[n];
            node.p[n] = repeaters_mid.data_mc[n];
        )

        (; node_idx : N_NODE :
            (; n : N :
                repeaters_mid.phi_pm[node_idx*N+n+1] = node._cp[node_idx][n];
                repeaters_mid.enable_pm[node_idx*N+n+1] = node._ce[node_idx][n];
                repeaters_mid.data_pm[node_idx*N+n+1] =  node.c[node_idx][n];
            )
        )
    ]
}

namespace brain_receiver {
    export
    template <pint M_SPK, M_MEM>
    defproc AERV_INT (globals g; eMx1of4<M_SPK> x_spk; eMx1of4<M_MEM> x_mem;
                      bool aerv__pp, aerv__pe; c1of<4> aerv_p) {
        // interface between datapath and receiver
        // merges input spike and input memory packet streams
        pint D = 4; // 1-of-D data
        ::aer::interface::SERIAL_RING<M_SPK, D> serial_spk(g,,,,);
        ::aer::interface::SERIAL_RING<M_MEM, D> serial_mem(g,,,,);
        (; m : M_SPK :
            serial_spk.x.m[m].d = x_spk.m[m].d;
        )
        (; m : M_MEM :
            serial_mem.x.m[m].d = x_mem.m[m].d;
        )
        serial_spk.x.e = x_spk.e;
        serial_mem.x.e = x_mem.e;

        bool merge_xp[2];
        bool merge_xe[2];
        c1of<D> merge_x[2];
        merge_xp[0] = serial_spk.yp;
        merge_xp[1] = serial_mem.yp;
        merge_xe[0] = serial_spk.ye;
        merge_xe[1] = serial_mem.ye;
        merge_x[0] = serial_spk.y;
        merge_x[1] = serial_mem.y;

        ::aer::interface::SERIAL_MERGE<2, D> merge(
            g, merge_xp, merge_xe,,, merge_x,);

        ::aer::receiver::TOP_INT<M_SPK-1, D> aerv_conv(g,
            merge.yp, aerv__pp,
            merge.ye, aerv__pe,
            merge.y, aerv_p
        );
    }

    export
    template <pint C>
    defproc MERGE_ACK (globals g; bool pp, pe, ce[C]) {
        // merges acknowledges from children with pphi acknowledge
        // C clients
        bool _pp;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                pp => _pp-

                ~_pp & (& : c : C : ~ce[c]) => pe+
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~pp<9> -> _pp+
                pp<6> -> _pp-

                ~_pp<12> & (& : c : C : ~ce[c]<12>) -> pe+
                _pp<6> | (| : c : C : ce[c]<6>) -> pe-
            }
        ]
    }

    export
    template <pint M, D>
    defproc DESERIALIZER (globals g; bool xp, xe; c1of<D> x; eMx1ofN<M, D> _y;
                          bool _pchg) {
        // wrapper for the deserializer
        pbool invert_y = true;
        pbool flip = true;

        MERGE_ACK<1> merge_ack(g, xp, xe,);
        ::aer::interface::DESERIAL_RING<M, D, invert_y, flip> deserial(
            g,,, _pchg);
        deserial.x.d = x.d;
        deserial.x.a = merge_ack.ce[0];
        (; m : M :
            deserial.y.m[m].d = _y.m[m].d;
        )
        deserial.y.e = _y.e;
    }

    export
    template <pint N>
    defproc HALF_BUFFER (globals g; e1of2 x[N]; a1of2 y[N]) {
        // prevents the synapse from holding up the receiver tree
        // wchb providing a half cycle of buffering
        pint D = 2; // for 1of2
        bool ye[N];
        c1of2 _y[N];
        c1of2 __y[N];
        (; n : N :
            __y[n] = y[n].m;
        )
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    y[n].a => ye[n]-

                    (& : d : D : ~y[n].d[d]) => x[n].e+

                    (: d : D :
                        x[n].d[d] & ye[n] -> _y[n].d[d]-
                        ~g._pReset | ~x[n].d[d] & ~ye[n] -> _y[n].d[d]+
                    )

                    (: d : D :
                        _y[n].d[d] => __y[n].d[d]-
                    )
                )
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    ~y[n].a<9> -> ye[n]+
                    y[n].a<6> -> ye[n]-

                    (& : d : D : ~y[n].d[d]<18>) -> x[n].e+
                    (| : d : D : y[n].d[d]<6>) -> x[n].e-

                    (: d : D :
                        x[n].d[d]<18> & ye[n]<18> -> _y[n].d[d]-
                        ~g._pReset<9> |
                            ~x[n].d[d]<12> & ~ye[n]<12> -> _y[n].d[d]+
                    )

                    (: d : D :
                        ~_y[n].d[d]<9> -> __y[n].d[d]+
                        _y[n].d[d]<6> -> __y[n].d[d]-
                    )
                )
            }
        ]
    }
} // namespace brain_receiver

export
template <pint M, p4M, M_SPK, M_MEM, N_SYN, N_MEM>
defproc BRAIN_AERV (globals g; eMx1of4<M_SPK> x_spk; 
                    eMx1of4<M_MEM> x_mem;
                    a1of2 y_syn[N_SYN]; aMx1of4<M_MEM-M> _y_mem[N_MEM]) {
    // braindrop / brainstorm receiver system
    // M tree depth
    //     M = 5 in production
    // p4M potential ports
    //     p4M = 4^M
    // M_SPK packet length of spike to deliver to synapse.
    //     M_SPK = M + 1 = 6 in production
    // M_MEM packet length to write config memory
    //     M_MEM = M + memory packet length = 9 in production
    // N_SYN synapses
    //     N_SYN = 4^M = 1024 in production
    // N_MEM configuration memories
    //     N_MEM = 4^(M-1) = 256 in production
    pint D = 4; // 1-of-D data
    N_MEM*4 = N_SYN; // assert

    brain_receiver::AERV_INT<M_SPK, M_MEM> aerv_int(g, x_spk, x_mem,,,);
    brain_receiver::DESERIALIZER<M_MEM-M, D> mem_deserial[N_MEM];
    bool aerv_yp_mem[N_MEM];
    bool aerv_ye_mem[N_MEM];
    c1of<D> aerv_mem[N_MEM];
    (; n : N_MEM :
        mem_deserial[n].g = g;
        // connect deserial to aerv
        mem_deserial[n].xp = aerv_yp_mem[n];
        mem_deserial[n].xe = aerv_ye_mem[n];
        mem_deserial[n].x = aerv_mem[n];
        // connect deserial to memory
        (; m : M_MEM-M :
            mem_deserial[n]._y.m[m].d = _y_mem[n].m[m].d;
        )
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            ~_y_mem[n].a<9> -> mem_deserial[n]._y.e+
            _y_mem[n].a<6> -> mem_deserial[n]._y.e-
        }
    )
    
    // buffer synapse spikes
    e1of2 aerv_syn[N_SYN];
    brain_receiver::HALF_BUFFER<N_SYN> buf_syn(g, aerv_syn, y_syn);

    AERV<M, D, p4M, N_SYN, N_MEM> aerv(
        g, aerv_int.aerv__pp, aerv_int.aerv__pe, aerv_int.aerv_p,
        aerv_syn, aerv_yp_mem, aerv_ye_mem, aerv_mem);
}

} // namespace aer
