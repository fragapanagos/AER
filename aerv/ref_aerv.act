// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer/interface/ref_interface.act";

namespace aer {

namespace receiver {
    export
    template <pint N>
    defproc NODE (globals g; bool pp, pe, ce[N], cp[N]; c1of<N> p, c[N]) {
        // node in AERV tree
        // N fanout (radix)
        bool u[N], uu, v;
        prs<g.Vdd, g.GND> {
            (| : n : N : u[n]) => uu+

            pp & ~uu | (| : n : N : ce[n]) => pe+

            (: n : N :
                p.d[n] & ~v -> u[n]+
                ~pp -> u[n]-
            )

            uu & (& : n : N : ~p.d[n]) -> v+
            ~uu -> v-

            (: n : N :
                v & u[n] => cp[n]+
            )

            (: np : N :
                (: nc : N :
                    p.d[np] & cp[nc] => c[nc].d[np]+
                )
            )
        }
    }

    export
    template <pint D, N_SYN, N_MEM>
    defproc LEAF (globals g; bool pp, pe; c1of<D> p;
                  bool cp_mem[N_MEM],
                  ce_syn[N_SYN], ce_mem[N_MEM];
                  c1of2 c_syn[N_SYN]; c1of<D> c_mem[N_MEM]) {
        // AERV tree LEAF supports {synapse, memory} port types
        // D 1-of-D data
        // N_SYN synapses
        // N_MEM memory ports
        pint SYN_PPORT = D / 2; // synapses per port
        // synapses receive 1-of-2 data, so multiple synapses can be packed on
        // a single port
        pint N_SYN_PORT = N_SYN / SYN_PPORT; // synapse ports
        pint F = N_SYN_PORT + N_MEM; // fanout
        [ F > D ->
            1=0; // assert false
        ]

        bool cp_syn[N_SYN_PORT];
        bool u_syn[N_SYN_PORT], u_mem[N_MEM], uu, v;
        prs<g.Vdd, g.GND> {
            (|:n:N_SYN_PORT: u_syn[n]) | (|:n:N_MEM: u_mem[n]) => uu+

            pp & ~uu |
                (|:n:N_SYN_PORT: cp_syn[n] &
                    (&:s:SYN_PPORT: (&:d:2: ~c_syn[n*SYN_PPORT+s].d[d]))) |
                (|:n:N_MEM: ce_mem[n]) => pe+
            
            (: n : N_SYN_PORT :
                p.d[n] & ~v -> u_syn[n]+
                ~pp -> u_syn[n]-
                v & u_syn[n] => cp_syn[n]+
            )
            (: n : N_MEM :
                p.d[n+N_SYN_PORT] & ~v -> u_mem[n]+
                ~pp -> u_mem[n]-
                v & u_mem[n] => cp_mem[n]+
            )

            uu & (& : f : F : ~p.d[f]) -> v+
            ~uu -> v-

            (: n : N_SYN_PORT :
                (: nn : SYN_PPORT :
                    (: d : 2 :
                        p.d[nn*SYN_PPORT+d] & cp_syn[n]
                            & ce_syn[n*SYN_PPORT+nn]
                            -> c_syn[n*SYN_PPORT+nn].d[d]+
                        g.pReset | ~p.d[nn*SYN_PPORT+d]
                            & ~ce_syn[n*SYN_PPORT+nn]
                            -> c_syn[n*SYN_PPORT+nn].d[d]-
                    )
                )
            )

            (: n : N_MEM :
                (: d : D :
                    p.d[d] & cp_mem[n] => c_mem[n].d[d]+
                )
            )
        }
    }

    export
    template <pint N>
    defproc LEAF_NODATA (globals g; bool pp, pe, ce[N], cp[N]; c1of<N> p) {
        // leaf of AERV tree that does not transmit data
        bool u;
        prs<g.Vdd, g.GND> {
            pp & (& : n : N : ~ce[n]) | u => pe+

            (: n : N :
                p.d[n] -> cp[n]+
                ~pp -> cp[n]-
            )

            (| : n : N : ce[n] & ~p.d[n]) => u+
        }
    }
} // namespace receiver

export
template <pint M, N, pNM, N_SYN, N_MEM>
defproc AERV (globals g; bool pp, pe; c1of<N> p;
              e1of2 syn[N_SYN]; 
              bool yp_mem[N_MEM], ye_mem[N_MEM]; c1of<N> mem[N_MEM]) {
    // receiver capable of sending data to neuron
    // M tree levels
    // N 1-of-N data and fanout for intermediate nodes
    // pNM = N^M potential LEAF output ports
    // N_SYN synapses
    // N_MEM memories
    pint SYN_PPORT = N/2;
    pint N_SYN_PORT = N_SYN/SYN_PPORT;
    [ (N_SYN_PORT + N_MEM) > pNM ->
        0=1; // assert false
    ]

    pint N_LEAF = pNM/N; // = N^(M-1)
    pint N_NODE = (pNM-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    // N_LEAF + N_NODE = (N^M-1) / (N-1)

    pint SYN_PER_LEAF = N_SYN/N_LEAF;
    pint MEM_PER_LEAF = N_MEM/N_LEAF;
    receiver::LEAF<N, N_SYN/N_LEAF, N_MEM/N_LEAF> leaf[N_LEAF];
    (; n : N_LEAF :
        leaf[n].g = g;
        (; ns : SYN_PER_LEAF :
            leaf[n].ce_syn[ns] = syn[n*SYN_PER_LEAF+ns].e;
            leaf[n].c_syn[ns] = syn[n*SYN_PER_LEAF+ns].m;
        )
        (; nm : MEM_PER_LEAF :
            leaf[n].cp_mem[nm] = yp_mem[n*MEM_PER_LEAF+nm];
            leaf[n].ce_mem[nm] = ye_mem[n*MEM_PER_LEAF+nm];
            leaf[n].c_mem[nm] = mem[n*MEM_PER_LEAF+nm];
        )
    )

    [ M = 1 ->
        pNM = N; // assert
        leaf[0].pp = pp;
        leaf[0].pe = pe;
        leaf[0].p = p;
    [] M > 1 ->
        receiver::NODE<N> node[N_NODE];
        (; n : N_NODE :
            node[n].g = g;
        )
        node[0].pe = pe;
        node[0].pp = pp;
        node[0].p = p;

        // connect NODEs to LEAFs
        pint N_LOW_NODE = N_LEAF/N; // NODEs connecting to LEAFs
        pint NODE_BASE_IDX = N_NODE-N_LOW_NODE;
        (; node_idx : NODE_BASE_IDX..N_NODE-1 :
            (; n : N :
                node[node_idx].ce[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pe;
                node[node_idx].cp[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pp;
                node[node_idx].c[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].p;
            )
        )

        // connect NODEs to NODEs
        [ M > 2 ->
            (; np : NODE_BASE_IDX :
                (; nc : N :
                    node[np].cp[nc] = node[np*N+nc+1].pp;
                    node[np].ce[nc] = node[np*N+nc+1].pe;
                    node[np].c[nc] =  node[np*N+nc+1].p;
                )
            )
        ]
    ]
}

export
template <pint M, N, NN>
defproc AERV_NODATA (globals g; bool ye[NN], yp[NN], pp, pe; c1of<N> p) {
    // receiver that does not send data to targets
    //     (targets could be synapses or neurons)
    // M depth of AERV tree
    // N radix of AERV tree
    // NN targets = N^M
    pint N_LEAF = NN/N; // = N^(M-1)
    pint N_NODE = (NN-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    // N_LEAF + N_NODE = (N^M-1) / (N-1)

    receiver::LEAF_NODATA<N> leaf[N_LEAF];

    (; n : N_LEAF :
        leaf[n].g = g;
        leaf[n].cp = yp[n*N..(n+1)*N-1];
        leaf[n].ce = ye[n*N..(n+1)*N-1];
    )

    [ M = 1 ->
        NN = N; // assert
        leaf[0].pp = pp;
        leaf[0].pe = pe;
        leaf[0].p = p;
    [] M > 1 ->
        receiver::NODE<N> node[N_NODE];
        (; n : N_NODE :
            node[n].g = g;
        )
        node[0].pe = pe;
        node[0].pp = pp;
        node[0].p = p;

        // connect NODEs to LEAFs
        pint N_LOW_NODE = N_LEAF/N; // NODEs connecting to LEAFs
        pint NODE_BASE_IDX = N_NODE-N_LOW_NODE;
        (; node_idx : NODE_BASE_IDX..N_NODE-1 :
            (; n : N :
                node[node_idx].ce[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pe;
                node[node_idx].cp[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pp;
                node[node_idx].c[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].p;
            )
        )

        [ M > 2 ->
            (; np : NODE_BASE_IDX :
                (; nc : N :
                    node[np].cp[nc] = node[np*N+nc+1].pp;
                    node[np].ce[nc] = node[np*N+nc+1].pe;
                    node[np].c[nc] =  node[np*N+nc+1].p;
                )
            )
        ]
    ]
}

export
template <pint M, p4M>
defproc AERV_TO_TILE (globals g; bool pp, pe; c1of<4> p;
                      bool cp[p4M/4], ce[p4M/4]; c1of<4> c[p4M/4]) {
    // AERV tree above the TILE (in logic space)
    // contains all of the intermediate NODEs
    // M tree levels
    // p4M = 4^M potential LEAF output ports
    pint N = 4; // required for TILE
    pint N_NODE = (p4M-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    pint N_LEAF = p4M/N; // = N^(M-1)

    [ M = 1 ->
        p4M = 4; // assert
        cp[0] = pp;
        ce[0] = pe;
        c[0] = p;
    [] M > 1 ->
        receiver::NODE<N> node[N_NODE];
        (; n : N_NODE :
            node[n].g = g;
        )
        node[0].pe = pe;
        node[0].pp = pp;
        node[0].p = p;

        // connect NODEs to LEAF ports 
        pint N_LOW_NODE = N_LEAF/N; // NODEs connecting to LEAF ports
        pint NODE_BASE_IDX = N_NODE-N_LOW_NODE;
        (; node_idx : NODE_BASE_IDX..N_NODE-1 :
            (; n : N :
                node[node_idx].ce[n] = ce[(node_idx-NODE_BASE_IDX)*N+n];
                node[node_idx].cp[n] = cp[(node_idx-NODE_BASE_IDX)*N+n];
                node[node_idx].c[n] = c[(node_idx-NODE_BASE_IDX)*N+n];
            )
        )

        // connect NODEs to NODEs
        [ M > 2 ->
            (; np : NODE_BASE_IDX :
                (; nc : N :
                    node[np].cp[nc] = node[np*N+nc+1].pp;
                    node[np].ce[nc] = node[np*N+nc+1].pe;
                    node[np].c[nc] =  node[np*N+nc+1].p;
                )
            )
        ]
    ]
}

namespace brain_receiver {
    export
    template <pint M_SPK, M_MEM>
    defproc AERV_INT (globals g; eMx1of4<M_SPK> x_spk; eMx1of4<M_MEM> x_mem;
                      bool aerv_pp, aerv_pe; c1of<4> aerv_p) {
        // interface between datapath and receiver
        // merges input spike and input memory packet streams
        pint D = 4; // 1-of-D data
        ::aer::interface::SERIAL_RING<M_SPK, D> serial_spk(g,,,,);
        ::aer::interface::SERIAL_RING<M_MEM, D> serial_mem(g,,,,);
        (; m : M_SPK :
            serial_spk.x.m[m].d = x_spk.m[m].d;
        )
        (; m : M_MEM :
            serial_mem.x.m[m].d = x_mem.m[m].d;
        )
        serial_spk.x.e = x_spk.e;
        serial_mem.x.e = x_mem.e;

        bool merge_xp[2];
        bool merge_xe[2];
        c1of<D> merge_x[2];
        merge_xp[0] = serial_spk.yp;
        merge_xp[1] = serial_mem.yp;
        merge_xe[0] = serial_spk.ye;
        merge_xe[1] = serial_mem.ye;
        merge_x[0] = serial_spk.y;
        merge_x[1] = serial_mem.y;

        ::aer::interface::SERIAL_MERGE<2, D> merge(
            g, merge_xp, merge_xe, aerv_pe, aerv_pp, merge_x, aerv_p);
    }

    template <pint C>
    defproc MERGE_ACK (globals g; bool pp, pe, ce[C]) {
         // merges acknowledges from children with pphi acknowledge
         // C clients
         prs<g.Vdd, g.GND> {
            pp & (& : c : C : ~ce[c]) => pe+
         }
    }

    export
    template <pint M, D>
    defproc DESERIALIZER (globals g; bool xp, xe; c1of<D> x; eMx1ofN<M, D> _y) {
        // wrapper for the deserializer
        // M words in serial packet
        // D 1-in-D data

        MERGE_ACK<1> merge_ack(g, xp, xe,);
        ::aer::interface::DESERIAL_RING<M, D, true, true> deserial(g,,);
        deserial.x.d = x.d;
        deserial.x.a = merge_ack.ce[0];
        deserial.y = _y;
    }

    export
    template <pint N>
    defproc HALF_BUFFER (globals g; e1of2 x[N]; a1of2 y[N]) {
        // Buffer between receiver and synapse
        // N synapses
        // prevents the synapse from holding up the receiver tree
        // wchb providing a half cycle of buffering
        pint D = 2; // for 1of2
        bool ye[N];
        prs<g.Vdd, g.GND> {
            (: n : N :
                y[n].a => ye[n]-

                (& : d : D : ~y[n].d[d]) => x[n].e+

                (: d : D :
                    x[n].d[d] & ye[n] -> y[n].d[d]+
                    g.pReset | ~x[n].d[d] & ~ye[n] -> y[n].d[d]-
                )
            )
        }
    }
} // namespace brain_receiver

export
template <pint M, p4M, M_SPK, M_MEM, N_SYN, N_MEM>
defproc BRAIN_AERV (globals g; eMx1of4<M_SPK> x_spk; 
                    eMx1of4<M_MEM> x_mem;
                    a1of2 y_syn[N_SYN]; aMx1of4<M_MEM-M> _y_mem[N_MEM]) {
    // braindrop / brainstorm receiver system
    // M tree depth
    //     M = 5 (in production)
    // p4M potential ports
    //     p4M = 4^M
    // M_SPK packet length of spike to deliver to synapse.
    //     M_SPK = M + 1
    //     M_SPK = 6 (in production)
    // M_MEM packet length to write config memory
    //     M_MEM = M + memory packet length
    //     M_MEM = 9 (in production)
    // N_SYN synapses
    //     N_SYN = 4^M
    //     N_SYN = 1024 (in production)
    // N_MEM configuration memories
    //     N_MEM = 4^(M-1)
    //     N_MEM = 256 (in production)
    pint D = 4; // 1-of-D data
    N_MEM*4 = N_SYN; // assert

    brain_receiver::AERV_INT<M_SPK, M_MEM> aerv_int(g, x_spk, x_mem,,,);
    brain_receiver::DESERIALIZER<M_MEM-M, D> mem_deserial[N_MEM];
    bool aerv_yp_mem[N_MEM];
    bool aerv_ye_mem[N_MEM];
    c1of<D> aerv_mem[N_MEM];
    (; n : N_MEM :
        mem_deserial[n].g = g;
        // connect deserial to aerv
        mem_deserial[n].xp = aerv_yp_mem[n];
        mem_deserial[n].xe = aerv_ye_mem[n];
        mem_deserial[n].x = aerv_mem[n];
        // connect deserial to memory
        (; m : M_MEM-M :
            mem_deserial[n]._y.m[m].d = _y_mem[n].m[m].d;
        )
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            ~_y_mem[n].a<9> -> mem_deserial[n]._y.e+
            _y_mem[n].a<6> -> mem_deserial[n]._y.e-
        }
    )

    // buffer synapse spikes
    e1of2 aerv_syn[N_SYN];
    brain_receiver::HALF_BUFFER<N_SYN> buf_syn(g, aerv_syn, y_syn);

    AERV<M, D, p4M, N_SYN, N_MEM> aerv(
        g, aerv_int.aerv_pp, aerv_int.aerv_pe, aerv_int.aerv_p,
        aerv_syn, aerv_yp_mem, aerv_ye_mem, aerv_mem);
}

} // namespace aer
