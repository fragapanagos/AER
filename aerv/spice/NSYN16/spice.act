import "aer/aerv/aerv.act";

namespace aer {

export defproc Wrapper(globals_np g_np; eMx1of4<3> spk_src; eMx1of4<3> mem_src;
 a1of2 syn_snk[16]; eMx1of4<1> mem_snk[4])
{
    bool Vdd;
    bool GND;
    bool vpsub;
    bool vnsub;
    globals g;

    // rails and reset
    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    prs <Vdd, GND> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    pint M     = 2;
    pint Mp4   = 16; // 4**M
    pint M_SPK = M+1;
    pint M_MEM = M+1;
    pint N_SYN = 16;
    pint N_MEM = 4;
    pint D     = 4;
    BRAIN_AERV<M, Mp4, M_SPK, M_MEM, N_SYN, N_MEM> aerv(g,,,,);

    // connect src
    spk_src = aerv.x_spk;
    mem_src = aerv.x_mem;

    // connect snk
    syn_snk = aerv.y_syn;
    (; n : N_MEM :
        mem_snk[n].e = aerv._y_mem[n].e;
    )
    prs <Vdd, GND> {
        (: n : N_MEM :
            (: m : M_MEM-M :
                (: d : D :
                    aerv._y_mem[n].m[m].d[d] => mem_snk[n].m[m].d[d]-
                )
            )
        )
    }
}

} // namespace aer

::aer::Wrapper dut;
