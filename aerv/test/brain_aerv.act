// tests that brain aerv works without deadlock, instability, or interference
// while both spikes and memory packets are being delivered randomly
import "aer/aerv/aerv.act";
import "aer/lib/test.act";

pint M     = 3;
pint Mp4   = 64; // 4**M
pint M_SPK = M+1;
pint M_MEM = M+4;
pint N_SYN = Mp4;
pint N_MEM = N_SYN/4;
pint D     = 4;
pbool flip_mem_out = true;

aer::globals g;
aer::SOURCE_BRAIN_AERV<M_SPK, M_SPK-M, 0, 2> spk_src(g,);
aer::SOURCE_BRAIN_AERV<M_MEM, M_MEM-M, 2, 1> mem_src(g,);
aer::SYNAPSE spk_snk[N_SYN];
aer::SINK_eMx1ofN<M_MEM-M, D> mem_snk[N_MEM];

aer::a1of2 y_syn[N_SYN];
(; n : N_SYN :
    spk_snk[n].g = g;
    spk_snk[n].spk = y_syn[n];
)
aer::eMx1of4<M_MEM-M> _y_mem[N_MEM];
(; n : N_MEM :
    mem_snk[n].g = g;
    mem_snk[n].d.e = _y_mem[n].e;
)

prs<g.Vdd, g.GND> {
    (: n : N_MEM :
        (: m : M_MEM - M :
            (: d : D :
                _y_mem[n].m[m].d[d] => mem_snk[n].d.m[m].d[d]-
            )
        )
    )
}

aer::BRAIN_AERV<M, Mp4, M_SPK, M_MEM, N_SYN, N_MEM, flip_mem_out>
    aerv(g, spk_src.d, mem_src.d, y_syn, _y_mem);
