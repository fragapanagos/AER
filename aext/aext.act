// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer/lib/arbiter.act";
import "aer/interface/interface.act";

namespace aer {

namespace transmitter {
    template <pint N>
    defproc NODE_ (globals g; bool _cp[N], ce[N], pe, _pp; c1of<N> _c[N], _p) {
        // AEXT tree NODE
        bool c_[N], _ce[N], v, _v, _u[N];
        c1of<N> p;
        ::aer::arbiter::N_ARB_S<N> arb(g, _cp, c_);

        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                _v & (| : n : N : c_[n]) -> _pp-
                ~g._pReset | (| : n : N : ~_ce[n] & ~c_[n]) -> _pp+

                (: n : N :
                    c_[n] & pe & _v -> _u[n]-
                    ~g._pReset | ~_v -> _u[n]+
                )

                ~pe & (| : n : N : ~_u[n]) -> v+
                _pp & (& : n : N : _ce[n]) -> v-

                v => _v-

                c_[0] & v & pe & (& : n : 1..N-1 : _ce[n]) -> _ce[0]-
                (: n : 1..N-2:
                    c_[n] & v & pe & 
                        (& : nn : 0..n-1 : _ce[nn]) & 
                        (& : nn : n+1..N-1 : _ce[nn]) -> _ce[n]-
                )
                c_[N-1] & v & pe & (& : n : 0..N-2 : _ce[n]) -> _ce[N-1]-
                (: n : N :
                    ~pe -> _ce[n]+

                    _ce[n] => ce[n]-
                )

                (: n : N :
                    (| : nc : N : ~_c[nc].d[n]) | ~_u[n] => p.d[n]+
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    p.d[n] => _p.d[n]-
                )
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                _v<15> & (| : n : N : c_[n]<15>) -> _pp-
                ~g._pReset<9> | (| : n : N : ~_ce[n]<24> & ~c_[n]<24>) -> _pp+

                (: n : N :
                    c_[n]<18> & pe<18> & _v<18> -> _u[n]-
                    ~g._pReset<9> | ~_v<16> -> _u[n]+
                )

                ~pe<20> & (| : n : N : ~_u[n]<20>) -> v+
                _pp<18> & (& : n : N : _ce[n]<18>) -> v-

                ~v<15> -> _v+
                v<9> -> _v-

                (& : n : 1..N-1 : _ce[n]<18>) &
                    v<18> & c_[0]<18> & pe<18> -> _ce[0]-
                (: n : 1..N-2:
                    (& : nn : 0..n-1 : _ce[nn]<18>) & 
                        (& : nn : n+1..N-1 : _ce[nn]<18>) &
                        v<18> & c_[n]<18> & pe<18> -> _ce[n]-
                )
                (& : n : 0..N-2 : _ce[n]<18>) &
                    v<18> & c_[N-1]<18> & pe<18> -> _ce[N-1]-
                (: n : N :
                    ~pe<18> -> _ce[n]+

                    ~_ce[n]<24> -> ce[n]+
                    _ce[n]<18> -> ce[n]-
                )

                (: n : N :
                    (| : nc : N : ~_c[nc].d[n]<12>) | ~_u[n]<12> -> p.d[n]+
                    (& : nc : N : _c[nc].d[n]<18>) & _u[n]<18> -> p.d[n]-
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    ~p.d[n]<12> -> _p.d[n]+
                    p.d[n]<9> -> _p.d[n]-
                )
            }
        ]
    }

    template <pint N>
    defproc LEAF_ (globals g; bool _cp[N], ca[N], pe, _pp; c1of<N> _p) {
        // AEXT tree LEAF
        bool c[N], _c[N], __c[N], _u[N], v, _v, __v, pp;
        ::aer::arbiter::N_ARB_S<N> arb(g, _cp, c);
        c1of<N> p;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                v => _v-
                _v => __v-

                (: n : N :
                    c[n] => _c[n]-
                )

                (| : n : N : ~_c[n]) & ~__v -> pp+
                g.pReset | pe & __v -> pp-

                (: n : N :
                    _c[n] => __c[n]-
                )

                (: n : N :
                    __c[n] & pe & _v -> _u[n]-
                    ~__c[n] & ~pp & ~pe -> _u[n]+
                )

                (| : n : N : ~_u[n]) & ~pe -> v+
                (& : n : N : _u[n]) -> v-

                (: n : N :
                    ~_u[n] & ~_c[n] => p.d[n]+
                )

                (: n : N :
                    ~_u[n] & ~_v => ca[n]+
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                // switch to active low
                (: n : N :
                    p.d[n] => _p.d[n]-
                )
                pp => _pp-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~v<14> -> _v+
                v<9> -> _v-

                ~_v<9> -> __v+
                _v<6> -> __v-

                (: n : N :
                    ~c[n]<10> -> _c[n]+
                    c[n]<6> -> _c[n]-
                )

                (| : n : N : ~_c[n]<27>) & ~__v<27> -> pp+
                g.pReset<6> | pe<12> & __v<12> -> pp-

                (: n: N :
                    ~_c[n]<9> -> __c[n]+
                    _c[n]<6> -> __c[n]-
                )

                (: n : N :
                    pe<18> & __c[n]<18> & _v<18> -> _u[n]-
                    ~pe<27> & ~__c[n]<27> & ~pp<27> -> _u[n]+
                )

                ~pe<18> & (| : n : N : ~_u[n]<18>) -> v+
                (& : n : N : _u[n]<18>) -> v-

                (: n : N :
                    ~_u[n]<15> & ~_c[n]<15> -> p.d[n]+
                    _u[n]<6> | _c[n]<6> -> p.d[n]-
                )

                (: n : N :
                    ~_u[n]<16> & ~_v<16> -> ca[n]+
                    _u[n]<6> | _v<6> -> ca[n]-
                )
            }
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                // switch to active low
                (: n : N :
                    ~p.d[n]<9> -> _p.d[n]+
                    p.d[n]<6> -> _p.d[n]-
                )
                ~pp<9> -> _pp+
                pp<6> -> _pp-
            }
        ]
    }

    export
    template <pint NN>
    defproc NRN_BUF (globals g; bool xp[NN], xa[NN], ya[NN], _yp[NN]) {
        // buffer the neuron spikes so that the refractory period does not
        // hold up the transmitter
        // NN neurons
        bool _xa[NN];
        bool __xa[NN];
        __xa = xa;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: nn : NN :
                    xp[nn] & _xa[nn] => _yp[nn]-

                    ya[nn] -> _xa[nn]-
                    ~ya[nn] & ~xp[nn] -> _xa[nn]+

                    _xa[nn] => __xa[nn]-
                )
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: nn : NN :
                    xp[nn]<12> & _xa[nn]<12> -> _yp[nn]-
                    ~xp[nn]<9> | ~_xa[nn]<9> -> _yp[nn]+

                    ya[nn]<6> -> _xa[nn]-
                    ~ya[nn]<18> & ~xp[nn]<18> -> _xa[nn]+

                    ~_xa[nn]<9> -> __xa[nn]+
                    _xa[nn]<6> -> __xa[nn]-
                )
            }
        ]
    }

    namespace repeaters
        // Repeater and Node Structure:
        //     LEAF -> REPEATERS_C<0> ->
        //         REPEATERS_M<0> ->
        //     REPEATERS_P<0> -> NODE_LVL0 -> REPEATERS_C<1> ->
        //         REPEATERS_M<1> ->
        //     REPEATERS_P<1> -> NODE_LVL1 -> REPEATERS_C<2> ->
        //         REPEATERS_M<2> ->
        //     REPEATERS_P<2> -> NODE_LVL2 -> REPEATERS_C<3> ->
        //         REPEATERS_M<3> ->
        //     REPEATERS_P<3> -> NODE_LVL3 -> REPEATERS_C<4> ->
        //         REPEATERS_M<4> ->
        //     REPEATERS_P<4> -> NODE_LVL4 -> REPEATERS_C<5> ->
        //         REPEATERS_M<5> ->
        //     REPEATERS_P<5> -> array edge
        // .----------------------------------------------------------.
        // |                 link  | S_enable       | C_enable        |
        // |-----------------------|----------------|-----------------|
        // | node[4] -- array edge | {3, 10, 6, 36} | {4, 64, 4, 192} |
        // | node[3] -- node[4]    | {3, 10, 6, 36} | {4, 64, 4, 192} |
        // | node[2] -- node[3]    | {3, 10, 6, 36} | {4, 64, 4, 64}  |
        // | node[1] -- node[2]    | {3, 10}        | {4, 64}         |
        // | node[0] -- node[1]    | {3, 10}        | {4, 32}         |
        // | leaf    -- node[0]    |                |                 |
        // |----------------------------------------------------------|
        // |                 link  | S_phi/data     | C_phi/data      |
        // |-----------------------|----------------|-----------------|
        // | node[4] -- array edge | {5, 1, 5, 25}  | {64, 4, 4, 192} |
        // | node[3] -- node[4]    | {5, 1, 5, 25}  | {64, 4, 4, 192} |
        // | node[2] -- node[3]    | {5, 1, 5, 25}  | {64, 4, 4, 64}  |
        // | node[1] -- node[2]    | {5, 1}         | {64, 4}         |
        // | node[0] -- node[1]    | {5, 1}         | {32, 4}         |
        // | leaf    -- node[0]    |                |                 |
        // *----------------------------------------------------------*
    {
        export
        template <pint M_idx, N>
        defproc REPEATERS_P(globals g;
            bool p__cp, phi_pm; 
            bool p_ce, enable_pm; 
            c1of<N> p__c, data_pm)
            // Repeaters grouped in the parent node cutout
        {
            pint Mmax = 6; // max AEXT NODE tree level
            [M_idx >= Mmax -> 0=1;] // assert false
            pint S_e[Mmax][2], C_e[Mmax][2];
            pint S_p_d[Mmax][1], C_p_d[Mmax][1];
            // sizing per repeater per stage (bottom to top in tree)
            S_p_d = {{0}, {1}, {1}, {0}, {0}, {0}};
            S_e = {{0, 0 }, {3, 10}, {3, 10},
                   {3, 10}, {3, 10}, {3, 10}};
            // cap per repeater per stage (bottom to top in tree)
            C_p_d = {{0}, {4}, {4}, {0}, {0}, {0}};
            C_e = {{0, 0 }, {4, 32}, {4, 64},
                   {4, 64}, {4, 64}, {4, 64}};

            // phi and data
            [ M_idx=0 | M_idx>2 ->
                phi_pm = p__cp;
                data_pm = p__c;
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
            [] M_idx>0 & M_idx <= 2 ->
                REPEATER_BOOL<1, {S_p_d[M_idx][0]}, {C_p_d[M_idx][0]}>
                    repeaters_phi(g, phi_pm, p__cp);
                REPEATER_c1of<N, 1, {S_p_d[M_idx][0]}, {C_p_d[M_idx][0]}>
                    repeater_data(g, data_pm, p__c);
            ]

            // enable line
            [ M_idx = 0 ->
                enable_pm = p_ce;
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
            [] M_idx > 0 ->
                REPEATER_BOOL<2, S_e[M_idx][0..1], C_e[M_idx][0..1]>
                    repeaters_enable(g, p_ce, enable_pm);
            ]
        }

        namespace mid {
            export
            template <pint M_idx, N>
            defproc REPEATERS_M_PHI_DATA(globals g;
                bool phi_pm, phi_mc; 
                c1of<N> data_pm, data_mc)
                // Repeaters grouped in the dedicated repeaters cutout
            {
                pint Mmax = 6; // max AEXT NODE tree level
                [M_idx<0 | M_idx>=Mmax -> 0=1;] // assert false
                pint S[Mmax][3], C[Mmax][3];
                // sizing per repeater per stage (bottom to top in tree)
                S = {{0, 0, 0 }, {0, 0, 0 }, {0, 0, 0 },
                     {1, 5, 25}, {1, 5, 25}, {1, 5, 25}};
                // cap per repeater per stage (bottom to top in tree)
                C = {{0, 0, 0  }, {0, 0, 0  }, {0, 0, 0  },
                     {4, 4, 64 }, {4, 4, 192}, {4, 4, 192}};

                [ M_idx < 3 ->
                    phi_pm = phi_mc; 
                    data_pm = data_mc;
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
                [] M_idx >= 3 ->
                    REPEATER_BOOL<3, S[M_idx][0..2], C[M_idx][0..2]>
                      repeaters_phi(g, phi_mc, phi_pm);
                    REPEATER_c1of<N, 3, S[M_idx][0..2], C[M_idx][0..2]>
                        repeater_data(g, data_mc, data_pm);
                ]
            }

            export
            template <pint M_idx>
            defproc REPEATERS_M_ENABLE(globals g; bool enable_pm, enable_mc) {
                // Repeaters grouped in the dedicated repeaters cutout
                pint Mmax = 6; // max AEXT NODE tree level
                [M_idx<0 | M_idx>=Mmax -> 0=1;] // assert false
                pint S[Mmax][2], C[Mmax][2];
                // sizing per repeater per stage (bottom to top in tree)
                S = {{0, 0 },
                     {0, 0 },
                     {0, 0 },
                     {6, 36},
                     {6, 36},
                     {6, 36}};
                // cap per repeater per stage (bottom to top in tree)
                C = {{0, 0  },
                     {0, 0  },
                     {0, 0  },
                     {4, 64 },
                     {4, 192},
                     {4, 192}};
    
                [ M_idx < 3 ->
                    enable_pm = enable_mc; 
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
                [] M_idx >= 3 ->
                    REPEATER_BOOL<2, S[M_idx][0..1], C[M_idx][0..1]>
                        repeaters_en(g, enable_pm, enable_mc);
                ]
            }
        } // namespace mid

        export
        template <pint M_idx, N>
        defproc REPEATERS_M(globals g;
            bool phi_pm, phi_mc; 
            bool enable_pm, enable_mc; 
            c1of<N> data_pm, data_mc)
            // Repeaters grouped in the dedicated repeaters cutout
        {
            mid::REPEATERS_M_PHI_DATA<M_idx, N>
                repeaters_m_phi_data(g, phi_pm, phi_mc, data_pm, data_mc);
            mid::REPEATERS_M_ENABLE<M_idx>
                repeaters_m_enable(g, enable_pm, enable_mc);
        }

        export
        template <pint M_idx, N>
        defproc REPEATERS_C(globals g;
            bool phi_mc, c__pp; 
            bool enable_mc, c_pe; 
            c1of<N> data_mc, c__p)
        {
            // Repeaters grouped in the child node cutout
            pint Mmax = 6; // max AEXT NODE tree level
            [M_idx<0 | M_idx>=Mmax -> 0=1;] // assert false
            pint S_p_d[Mmax], C_p_d[Mmax][1];
            // sizing per repeater per stage (bottom to top in tree)
            S_p_d = {0, 5, 5, 5, 5, 5};
            // cap per repeater per stage (bottom to top in tree)
            C_p_d = {{0}, {32}, {64}, {64}, {64}, {64}};

            [ M_idx=0 ->
                phi_mc = c__pp;
                data_mc = c__p;
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
            [] M_idx>0 ->
                REPEATER_BOOL<1, {S_p_d[M_idx]}, {C_p_d[M_idx][0]}>
                    repeaters_phi(g, c__pp, phi_mc);
                REPEATER_c1of<N, 1, {S_p_d[M_idx]}, {C_p_d[M_idx][0]}>
                    repeater_data(g, c__p, data_mc);
            ]
            enable_mc = c_pe;
        }
    } // namespace repeaters

    export
    template <pint N>
    defproc LEAF (globals g;
        bool _cp[N], ca[N], pe, _pp; c1of<N> _p) 
        // LEAF with repeaters placed in the same physical tile
        // N radix of AEXT tree (N=4 in production)
    {
        repeaters::REPEATERS_C<0, N> rep_c(g,,,,,,);
        rep_c.phi_mc = _pp;
        rep_c.enable_mc = pe;
        rep_c.data_mc = _p;

        LEAF_<N> _(g, _cp, ca,,,);
        _._pp = rep_c.c__pp;
        _.pe  = rep_c.c_pe;
        _._p  = rep_c.c__p;
    }

    export
    template <pint M_idx, N>
    defproc NODE (
        globals g; bool cp[N], ce[N], pe, pp; c1of<N> c[N], p)
        // NODE with repeaters placed in the same physical tile
        // M_idx [1-5] level in AEXT tree of NODE
        // N radix of AEXT (N=4 in production)
    {
        [M_idx<1 | M_idx>5 -> 0=1;] // assert false

        repeaters::REPEATERS_P<M_idx-1, N> rep_p[N];
        (; n : N :
            rep_p[n].g = g;
            rep_p[n].phi_pm = cp[n];
            rep_p[n].enable_pm = ce[n];
            rep_p[n].data_pm = c[n];
        )

        repeaters::REPEATERS_C<M_idx, N> rep_c(g,,,,,,);
        rep_c.phi_mc = pp;
        rep_c.enable_mc = pe;
        rep_c.data_mc = p;

        NODE_<N> _(g,,,,,,);
        (; n : N :
            _._cp[n] = rep_p[n].p__cp;
            _.ce[n]  = rep_p[n].p_ce;
            _._c[n]  = rep_p[n].p__c;
        )
        _._pp = rep_c.c__pp;
        _.pe  = rep_c.c_pe;
        _._p  = rep_c.c__p;
    }

    export
    template <pint M_NODE, N, N_NODE, M_STOP>
    defproc NODE_TREE(globals g;
        bool cp[N_NODE][N], ce[N_NODE][N]; c1of<N> c[N_NODE][N];
        bool pp[N_NODE],    pe[N_NODE];    c1of<N> p[N_NODE]) 
        // tree of NODE
        // M_NODE [1-5] depth of tree (depth of AEXT tree - 1)
        // N radix of tree
        // N_NODE number of nodes
        // M_STOP [0-4] 0-indexed bottom level of tree
    {
        [M_NODE>5 | M_NODE<1 -> 1=0;]  // assert false
        [M_STOP>4 | M_STOP<0 -> 1=0;]  // assert false
        pint M_IDX = M_NODE-1;

        pint n_node[M_STOP..M_IDX]; // number of nodes at each level
        pint base_idx[M_STOP..M_IDX];

        n_node[M_IDX] = 1;
        base_idx[M_IDX] = 0;
        (; m : M_IDX-M_STOP :
            n_node[M_IDX-1-m] = n_node[M_IDX-m]*N;
            base_idx[M_IDX-1-m] = base_idx[M_IDX-m]+n_node[M_IDX-m];
        )

        // level 4 NODEs
        [ M_IDX>=4 & M_STOP<=4 -> NODE<5, N> node_4[n_node[4]];
            (; n : n_node[4] :
                node_4[n].g = g;
                node_4[n].cp = cp[base_idx[4]+n];
                node_4[n].ce = ce[base_idx[4]+n];
                node_4[n].c  = c[base_idx[4]+n];
                node_4[n].pp = pp[base_idx[4]+n];
                node_4[n].pe = pe[base_idx[4]+n];
                node_4[n].p  = p[base_idx[4]+n];
            )
        ]
        // level 3 NODEs
        [ M_IDX>=3 & M_STOP<=3 -> NODE<4, N> node_3[n_node[3]];
            (; n : n_node[3] :
                node_3[n].g = g;
                node_3[n].cp = cp[base_idx[3]+n];
                node_3[n].ce = ce[base_idx[3]+n];
                node_3[n].c  = c[base_idx[3]+n];
                node_3[n].pp = pp[base_idx[3]+n];
                node_3[n].pe = pe[base_idx[3]+n];
                node_3[n].p  = p[base_idx[3]+n];
            )
        ]
        // level 2 NODEs
        [ M_IDX>=2 & M_STOP<=2 -> NODE<3, N> node_2[n_node[2]];
            (; n : n_node[2] :
                node_2[n].g = g;
                node_2[n].cp = cp[base_idx[2]+n];
                node_2[n].ce = ce[base_idx[2]+n];
                node_2[n].c  = c[base_idx[2]+n];
                node_2[n].pp = pp[base_idx[2]+n];
                node_2[n].pe = pe[base_idx[2]+n];
                node_2[n].p  = p[base_idx[2]+n];
            )
        ]
        // level 1 NODEs
        [ M_IDX>=1 & M_STOP<=1 -> NODE<2, N> node_1[n_node[1]];
            (; n : n_node[1] :
                node_1[n].g = g;
                node_1[n].cp = cp[base_idx[1]+n];
                node_1[n].ce = ce[base_idx[1]+n];
                node_1[n].c  = c[base_idx[1]+n];
                node_1[n].pp = pp[base_idx[1]+n];
                node_1[n].pe = pe[base_idx[1]+n];
                node_1[n].p  = p[base_idx[1]+n];
            )
        ]
        // level 0 NODEs
        [ M_IDX>=0 & M_STOP<=0 -> NODE<1, N> node_0[n_node[0]];
            (; n : n_node[0] :
                node_0[n].g = g;
                node_0[n].cp = cp[base_idx[0]+n];
                node_0[n].ce = ce[base_idx[0]+n];
                node_0[n].c  = c[base_idx[0]+n];
                node_0[n].pp = pp[base_idx[0]+n];
                node_0[n].pe = pe[base_idx[0]+n];
                node_0[n].p  = p[base_idx[0]+n];
            )
        ]
    }

    export
    template <pint M, N, N_LINK, M_STOP>
    defproc REPEATER_M_TREE(globals g;
        bool phi_mc[N_LINK], phi_pm[N_LINK];
        bool enable_mc[N_LINK], enable_pm[N_LINK];
        c1of<N> data_mc[N_LINK], data_pm[N_LINK]) 
        // tree of REPEATERS_M
        // M [1-6] depth of tree (depth of AEXT tree)
        // N radix of tree
        // N_LINK number of repeater links
        // M_STOP [0-5] 0-indexed bottom level of tree
        // Does not include the root level mid-level repeater
        //     which is provided by TOP_INT
    {
        [M>6 | M<1 -> 1=0;]  // assert false
        [M_STOP>5 | M_STOP<0 -> 1=0;]  // assert false
        pint M_IDX = M-1;

        pint n_rep[M_STOP..M_IDX]; // number of rep at each level
        pint base_idx[M_STOP..M_IDX];

        n_rep[M_IDX] = 1;
        base_idx[M_IDX] = 0;
        (; m : M_IDX-M_STOP :
            n_rep[M_IDX-1-m] = n_rep[M_IDX-m]*N;
            base_idx[M_IDX-1-m] = base_idx[M_IDX-m]+n_rep[M_IDX-m];
        )

        // skip root node, which will live in TOP_INT
        phi_mc[0] = phi_pm[0];
        enable_mc[0] = enable_pm[0];
        data_mc[0] = data_pm[0];

        // level 5 repeaters never get created (provided by TOP_INT)
        // level 4 repeaters; create if depth 6
        [ M_IDX>=5 & M_STOP<=4 -> repeaters::REPEATERS_M<4, N> rep_4[n_rep[4]];
            (; n : n_rep[4] :
                rep_4[n].g = g;
                rep_4[n].phi_pm = phi_pm[base_idx[4]+n];
                rep_4[n].phi_mc = phi_mc[base_idx[4]+n];
                rep_4[n].enable_pm = enable_pm[base_idx[4]+n];
                rep_4[n].enable_mc = enable_mc[base_idx[4]+n];
                rep_4[n].data_pm = data_pm[base_idx[4]+n];
                rep_4[n].data_mc = data_mc[base_idx[4]+n];
            )
        ]
        // level 3 repeaters; create if depth 5 or more
        [ M_IDX>=4 & M_STOP<=3 -> repeaters::REPEATERS_M<3, N> rep_3[n_rep[3]];
            (; n : n_rep[3] :
                rep_3[n].g = g;
                rep_3[n].phi_pm = phi_pm[base_idx[3]+n];
                rep_3[n].phi_mc = phi_mc[base_idx[3]+n];
                rep_3[n].enable_pm = enable_pm[base_idx[3]+n];
                rep_3[n].enable_mc = enable_mc[base_idx[3]+n];
                rep_3[n].data_pm = data_pm[base_idx[3]+n];
                rep_3[n].data_mc = data_mc[base_idx[3]+n];
            )
        ]
        // level 2 repeaters; create if depth 4 or more
        [ M_IDX>=3 & M_STOP<=2 -> repeaters::REPEATERS_M<2, N> rep_2[n_rep[2]];
            (; n : n_rep[2] :
                rep_2[n].g = g;
                rep_2[n].phi_pm = phi_pm[base_idx[2]+n];
                rep_2[n].phi_mc = phi_mc[base_idx[2]+n];
                rep_2[n].enable_pm = enable_pm[base_idx[2]+n];
                rep_2[n].enable_mc = enable_mc[base_idx[2]+n];
                rep_2[n].data_pm = data_pm[base_idx[2]+n];
                rep_2[n].data_mc = data_mc[base_idx[2]+n];
            )
        ]
        // level 1 repeaters; create if depth 3 or more
        [ M_IDX>=2 & M_STOP<=1 -> repeaters::REPEATERS_M<1, N> rep_1[n_rep[1]];
            (; n : n_rep[1] :
                rep_1[n].g = g;
                rep_1[n].phi_pm = phi_pm[base_idx[1]+n];
                rep_1[n].phi_mc = phi_mc[base_idx[1]+n];
                rep_1[n].enable_pm = enable_pm[base_idx[1]+n];
                rep_1[n].enable_mc = enable_mc[base_idx[1]+n];
                rep_1[n].data_pm = data_pm[base_idx[1]+n];
                rep_1[n].data_mc = data_mc[base_idx[1]+n];
            )
        ]
        // level 0 repeaters; create if depth 2 or more
        [ M_IDX>=1 & M_STOP<=0 -> repeaters::REPEATERS_M<0, N> rep_0[n_rep[0]];
            (; n : n_rep[0] :
                rep_0[n].g = g;
                rep_0[n].phi_pm = phi_pm[base_idx[0]+n];
                rep_0[n].phi_mc = phi_mc[base_idx[0]+n];
                rep_0[n].enable_pm = enable_pm[base_idx[0]+n];
                rep_0[n].enable_mc = enable_mc[base_idx[0]+n];
                rep_0[n].data_pm = data_pm[base_idx[0]+n];
                rep_0[n].data_mc = data_mc[base_idx[0]+n];
            )
        ]

        [ M_IDX<=M_STOP ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK to appease netgen -B
        ]
    }

    export
    template <pint M, N>
    defproc TOP_INT (globals g;
        bool x_phi, y_phi;
        bool x_enable, y_enable;
        c1of<N> x_data, y_data)
        // interface at the top of the AEXT tree
        // includes the mid and parent-level repeaters above the last NODE
    {
        repeaters::REPEATERS_M<M-1, N> rep_m(g,,,,,,);
        x_phi = rep_m.phi_mc;
        x_enable = rep_m.enable_mc;
        x_data = rep_m.data_mc;

        repeaters::REPEATERS_P<M-1, N> rep_p(g,,,,,,);
        rep_m.phi_pm = rep_p.phi_pm;
        rep_m.enable_pm = rep_p.enable_pm;
        rep_m.data_pm = rep_p.data_pm;

        rep_p.p_ce = y_enable;
        // convert from active low to active high
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            ~rep_p.p__cp<9> -> y_phi+
            rep_p.p__cp<6> -> y_phi-

            (: n : N :
                ~rep_p.p__c.d[n]<9> -> y_data.d[n]+
                rep_p.p__c.d[n]<6> -> y_data.d[n]-
            )
        }
    }
} // namespace transmitter

export
template <pint M, N, NN>
defproc AEXT (globals g; bool xp[NN], xa[NN], pe, pp; c1of<N> p) {
    // Transmitter transmits spikes from neurons to datapath
    // M depth of AEXT tree (max 6)
    // N radix of AEXT tree
    // NN neurons = N^M

    pint N_LEAF = NN/N; // = N^(M-1)
    pint N_NODE = (NN-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    pint N_LINK = N_NODE + N_LEAF;

    transmitter::NRN_BUF<NN> buf(g, xp, xa,,);

    transmitter::LEAF<N> leaf[N_LEAF];
    (; n : N_LEAF :
        leaf[n].g = g;
        leaf[n]._cp = buf._yp[n*N..(n+1)*N-1];
        leaf[n].ca = buf.ya[n*N..(n+1)*N-1];
    )

    transmitter::REPEATER_M_TREE<M, N, N_LINK, 0> repeaters_mid(g,,,,,,);
    repeaters_mid.phi_pm[0]    = pp;
    repeaters_mid.enable_pm[0] = pe;
    repeaters_mid.data_pm[0]   = p;

    pint LEAF_BASE_IDX = N_NODE; // = N_LINK - N_LEAF
    (; n : N_LEAF :
        leaf[n]._pp = repeaters_mid.phi_mc[LEAF_BASE_IDX+n];
        leaf[n].pe  = repeaters_mid.enable_mc[LEAF_BASE_IDX+n];
        leaf[n]._p  = repeaters_mid.data_mc[LEAF_BASE_IDX+n];
    )

    [ M = 1 ->
        NN = N; // assert
    [] M > 1 ->
        transmitter::NODE_TREE<M-1, N, N_NODE, 0> node(g,,,,,,);

        (; n : N_NODE :
            node.pp[n] = repeaters_mid.phi_mc[n];
            node.pe[n] = repeaters_mid.enable_mc[n];
            node.p[n] = repeaters_mid.data_mc[n];
        )

        (; node_idx : N_NODE :
            (; n : N :
                repeaters_mid.phi_pm[node_idx*N+n+1] = node.cp[node_idx][n];
                repeaters_mid.enable_pm[node_idx*N+n+1] = node.ce[node_idx][n];
                repeaters_mid.data_pm[node_idx*N+n+1] =  node.c[node_idx][n];
            )
        )
    ]
}

export
template <pint M, p4M>
defproc AEXT_TO_TILE (globals g;
    bool cp[p4M/16], ce[p4M/16]; c1of<4> c[p4M/16];
    bool pe, pp; c1of<4> p)
    // AEXT tree above the TILE (in logic space)
    // contains all but the lowest level intermediate NODEs
    // M tree levels (require M>=2)
    // p4M = 4^M neurons
{
    [M<2 -> 0=1;] // assert false
    pint N = 4; // required for TILE
    // TILE contains the LEAFs and the lowest level NODEs

    // These are the number of nodes logically above the TILE
    pint N_NODE = (p4M/N/N-1) / (N-1); // NODEs above TILEs
    pint N_NODE_TILE = p4M/N/N; // NODEs in TILEs
    
    pint N_LINK = N_NODE + N_NODE_TILE;

    transmitter::REPEATER_M_TREE<M, N, N_LINK, 1> repeaters_mid(g,,,,,,);
    // connect to root ports
    repeaters_mid.phi_pm[0]    = pp;
    repeaters_mid.enable_pm[0] = pe;
    repeaters_mid.data_pm[0]   = p;

    // connect to leaf ports
    pint BASE_REP_IDX = N_NODE;
    (; n : BASE_REP_IDX..N_LINK-1 :
        repeaters_mid.phi_mc[n] = cp[n-BASE_REP_IDX];
        repeaters_mid.enable_mc[n] = ce[n-BASE_REP_IDX];
        repeaters_mid.data_mc[n] = c[n-BASE_REP_IDX];
    )

    [ M>2 ->
        transmitter::NODE_TREE<M-1, N, N_NODE, 1> node(g,,,,,,);
        (; n : N_NODE :
            node.pp[n] = repeaters_mid.phi_mc[n];
            node.pe[n] = repeaters_mid.enable_mc[n];
            node.p[n] = repeaters_mid.data_mc[n];
        )

        (; node_idx : N_NODE :
            (; n : N :
                repeaters_mid.phi_pm[node_idx*N+n+1] = node.cp[node_idx][n];
                repeaters_mid.enable_pm[node_idx*N+n+1] = node.ce[node_idx][n];
                repeaters_mid.data_pm[node_idx*N+n+1] =  node.c[node_idx][n];
            )
        )
    ]
}

namespace brain_transmitter {
    export
    template <pint M, N>
    defproc AEXT_INT (globals g;
        bool aext__pp, aext_pe; c1of<N> aext__p;
        eMx1ofN<M, N> y_spk)
        // interface between transmitter and the datapath
        // M tree levels 
        // N radix of tree (N^M neurons)
    {
        ::aer::transmitter::TOP_INT<M, N>
            top_int(g, aext__pp,, aext_pe,, aext__p,);
        ::aer::interface::OUT_a1ofN<N>
            out(g, top_int.y_phi, top_int.y_enable, top_int.y_data,);
        ::aer::interface::DESERIAL_RING<M, N, false, true>
            deserial(g, out.y, y_spk,);
    }
} // namespace brain_transmitter

} // namespace aer
