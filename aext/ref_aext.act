// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer/lib/arbiter.act";
import "aer/interface/ref_interface.act";

namespace aer {

namespace transmitter {
    export
    template <pint N>
    defproc NODE (globals g; bool cp[N], ce[N], pe, pp; c1of<N> c[N], p) {
        // AEXT tree NODE
        bool _cp[N], c_[N], u[N], v;
        prs<g.Vdd, g.GND> {
            (: n : N :
                cp[n] => _cp[n]-
            )
        }
        ::aer::arbiter::N_ARB_S<N> arb(g, _cp, c_);

        prs<g.Vdd, g.GND> {
            ~v & (| : n : N : c_[n]) -> pp+
            g.pReset | (| : n : N : ce[n] & ~c_[n]) -> pp-
        
            (: n : N :
                c_[n] & pe & ~v -> u[n]+
                g.pReset | v -> u[n]-
            )

            (| : n : N : u[n]) & ~pe -> v+
            (& : n : N : ~ce[n]) & ~pp -> v-
            
            c_[0] & v & pe & (& : n : 1..N-1 : ~ce[n]) -> ce[0]+
            (: n : 1..N-2:
                c_[n] & v & pe & 
                (& : nn : 0..n-1 : ~ce[nn]) & 
                (& : nn : n+1..N-1 : ~ce[nn]) -> ce[n]+
            )
            c_[N-1] & v & pe & (& : n : 0..N-2 : ~ce[n]) -> ce[N-1]+
            (: n : N :
                ~pe -> ce[n]-
            )

            (: n : N :
                (| : nc : N : c[nc].d[n]) | u[n] => p.d[n]+
            )
        }
    }

    export
    template <pint N>
    defproc LEAF (globals g; bool cp[N], ca[N], pe, pp; c1of<N> p) {
        // AEXT tree LEAF
        bool _cp[N], c[N], u[N], v;
        prs<g.Vdd, g.GND> {
            (: n : N :
                cp[n] => _cp[n]-
            )
        }
        ::aer::arbiter::N_ARB_S<N> arb(g, _cp, c);

        prs<g.Vdd, g.GND> {
            (| : n : N : c[n]) & ~v -> pp+
            g.pReset | pe & v -> pp-

            (: n : N :
                c[n] & pe & ~v -> u[n]+
                ~c[n] & ~pp & ~pe -> u[n]-
            )

            (| : n : N : u[n]) & ~pe -> v+
            (& : n : N : ~u[n]) -> v-
        
            (: n : N :
                u[n] & c[n] => p.d[n]+
            )
            
            (: n : N :
                u[n] & v => ca[n]+
            )
        }
    }
} // namespace transmitter

export
template <pint M, N, NN>
defproc AEXT (globals g; bool xp[NN], xa[NN], pe, pp; c1of<N> p) {
    // M depth of AEXT tree
    // N radix of AEXT tree
    // NN neurons = N^M
    pint N_LEAF = NN/N; // = N^(M-1)
    pint N_NODE = (NN-N) / (N*(N-1)); // = (N^(M-1)-1) / (N-1)
    // N_LEAF + N_NODE = (N^M-1) / (N-1)
    transmitter::LEAF<N> leaf[N_LEAF];

    (; n : N_LEAF :
        leaf[n].g = g;
        leaf[n].cp = xp[n*N..(n+1)*N-1];
        leaf[n].ca = xa[n*N..(n+1)*N-1];
    )

    [ M = 1 ->
        NN = N; // assert
        leaf[0].pe = pe;
        leaf[0].pp = pp;
        leaf[0].p = p;
    [] M > 1 ->
        transmitter::NODE<N> node[N_NODE];
        (; n : N_NODE :
            node[n].g = g;
        )
        node[0].pe = pe;
        node[0].pp = pp;
        node[0].p = p;

        // connect NODEs to LEAFs
        pint N_LOW_NODE = N_LEAF/N; // NODEs connecting to LEAFs
        pint NODE_BASE_IDX = N_NODE-N_LOW_NODE;
        (; node_idx : NODE_BASE_IDX..N_NODE-1 :
            (; n : N :
                node[node_idx].ce[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pe;
                node[node_idx].cp[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].pp;
                node[node_idx].c[n] = leaf[(node_idx-NODE_BASE_IDX)*N+n].p;
            )
        )

        // connect NODEs to NODEs
        [ M > 2 ->
            (; np : NODE_BASE_IDX :
                (; nc : N :
                    node[np].cp[nc] = node[np*N+nc+1].pp;
                    node[np].ce[nc] = node[np*N+nc+1].pe;
                    node[np].c[nc] =  node[np*N+nc+1].p;
                )
            )
        ]
    ]
}

export
template <pint M, p4M>
defproc AEXT_TO_TILE (globals g; bool cp[p4M/16], ce[p4M/16]; c1of<4> c[p4M/16];
                      bool pe, pp; c1of<4> p) {
    // AEXT tree above the TILE (in logic space)
    // contains all but the lowest level intermediate NODEs
    // M tree levels (require M>=2)
    // p4M = 4^M neurons
    [ M < 2 ->
        0=1; // assert false
    ]
    pint N = 4; // required for TILE
    pint N_NODE = (p4M/N/N-1) / (N-1); // = (N^(M-2)-1) / (N-1)

    [ M = 2 ->
        p4M = 4*N; // assert
        ce[0] = pe;
        cp[0] = pp;
        c[0] = p;
    [] M > 2 ->
        transmitter::NODE<N> node[N_NODE];
        (; n : N_NODE :
            node[n].g = g;
        )
        node[0].pe = pe;
        node[0].pp = pp;
        node[0].p = p;

        // connect NODEs to child ports
        pint N_LOW_NODE = p4M/N/N/N; // NODEs connecting to LEAFs
        pint NODE_BASE_IDX = N_NODE-N_LOW_NODE;
        (; node_idx : NODE_BASE_IDX..N_NODE-1 :
            (; n : N :
                node[node_idx].ce[n] = ce[(node_idx-NODE_BASE_IDX)*N+n];
                node[node_idx].cp[n] = cp[(node_idx-NODE_BASE_IDX)*N+n];
                node[node_idx].c[n] = c[(node_idx-NODE_BASE_IDX)*N+n];
            )
        )

        // connect NODEs to NODEs
        [ M > 2 ->
            (; np : NODE_BASE_IDX :
                (; nc : N :
                    node[np].cp[nc] = node[np*N+nc+1].pp;
                    node[np].ce[nc] = node[np*N+nc+1].pe;
                    node[np].c[nc] =  node[np*N+nc+1].p;
                )
            )
        ]
    ]
}

namespace brain_transmitter {
    export
    template <pint NN>
    defproc NRN_BUF (globals g; bool xp[NN], xa[NN], ya[NN], yp[NN]) {
        // buffer the neuron spikes so that the refractory period does not
        // hold up the transmitter
        // NN neurons
        prs<g.Vdd, g.GND> {
            (: nn : NN :
                xp[nn] & ~xa[nn] => yp[nn]+

                ya[nn] -> xa[nn]+
                ~ya[nn] & ~xp[nn] -> xa[nn]-
            )
        }
    }
} // namespace brain_transmitter

export
template <pint M, N, NN>
defproc BRAIN_AEXT (globals g; bool xp[NN], xa[NN]; eMx1ofN<M, N> y) {
    // braindrop / brainstorm transmitter system
    // M tree depth
    //     M = 6 in production
    // N node fanout
    //     N = 4 in production
    // NN neurons
    //     NN = 4^M
    //     NN = 4096 in production
    brain_transmitter::NRN_BUF<NN> buf(g, xp, xa,,);
    AEXT<M, N, NN> aext(g, buf.yp, buf.ya,,,);
    interface::OUT_a1ofN<N> out(g, aext.pp, aext.pe, aext.p,);
    interface::DESERIAL_RING<M, N, false, true> deserial(g, out.y, y);
}

} // namespace aer
