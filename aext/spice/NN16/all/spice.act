import "aer/aer/";
import "aer/aext/aext.act";
import "aer/interface/interface.act";

namespace aer {

export defproc Wrapper(globals_np g_np; a1of<1> src[16]; eMx1of4<2> snk)
{
    bool Vdd;
    bool GND;
    bool vpsub;
    bool vnsub;

    globals g;
    pint M = 2;
    pint N = 4;
    pint NN = 16;
    AEXT<M, N, NN> aext(g,,,,,);
    interface::OUT_a1ofN<N> out(aext.g, aext.pp, aext.pi, aext.p,);
    interface::DESERIAL_RING<M, N> deserial(aext.g, out.y,);

    // rails and reset
    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    prs <Vdd, GND> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    // connect src
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: nn : NN :
            src[nn].d[0] => aext._xp[nn]-
        )
    }
    (; nn : NN :
        src[nn].a = aext.xo[nn];
    )

    // connect snk
    (; m : M :
        deserial.y.b[m].d = snk.b[m].d;
    )
    deserial.y.e = snk.e;
}

}

::aer::Wrapper dut;
