// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer/lib/globals.act";
import "aer/lib/channel.act";
import "aer/lib/arbiter.act";
import "aer/lib/logic.act";

namespace aer {

namespace interface {
    export
    template <pint N>
    defproc OUT_a1ofN (globals g; bool xp, xo; c1of<N> x; a1of<N> y) {
        // convert AEXT/AERV serial protocol to standard a1ofN channel
        bool _xp;
        x.d = y.d;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                xp => _xp-
                ~_xp & ~y.a => xo+
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~xp<12> -> _xp+
                xp<9> -> _xp-

                ~_xp<27> & ~y.a<27> -> xo+
                _xp<16> | y.a<16> -> xo-
            }
        ]
    }

    export
    template <pint N>
    defproc OUT_e1ofN (globals g; bool xp, xo; c1of<N> x; e1of<N> y) {
        // convert AEXT/AERV serial protocol to standard e1ofN channel
        // used in testing
        OUT_a1ofN<N> _(g, xp, xo, x,);
        y.d = _.y.d;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            y.e => _.y.a-
        }
    }

    namespace deserial_ring {
        export
        template <pint M, N>
        defproc SPLIT (globals g; a1of<N> x, _y[M]) {
            // SPLIT with active high input
            c1of<N> _x;
            (; m : M :
                _y[m].m = _x;
            )
            [ ~LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N:
                        x.d[n] => _x.d[n]-
                    )
                }
                _OR<M> or(g,,);
                (; m : M :
                    _y[m].a = or._i[m];
                )
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    or._o => x.a-
                }
            [] LAYOUT ->
                // _x.d[0..N]
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N:
                        x.d[n]<8> -> _x.d[n]-
                        ~x.d[n]<16> -> _x.d[n]+
                    )
                }

                // x.a
                [ M = 4 ->
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                        (| : m : M : ~_y[m].a<12>) -> x.a+
                        (& : m : M : _y[m].a<18>) -> x.a-
                    }
                [] (M != 4) ->
                    _OR<M> or(g,,);
                    (; m : M :
                        _y[m].a = or._i[m];
                    )
                    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                        ~or._o<10> -> x.a+
                        or._o<6> -> x.a-
                    }
                ]
            ]
        }

        export
        template <pint N; pbool invert_y>
        defproc NODE (globals g; a1of<N> _x; c1of<N> y; bool _si, _so) {
            bool _s, __s, vy;
            c1of<N> y_;
            c1of<N> _y;
            [ ~invert_y ->
                y_ = y;
            [] invert_y ->
                _y = y;
            ]
            [ ~LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    _s => __s-

                    (: n : N :
                        ~__s & ~_si & ~_x.d[n] -> y_.d[n]+
                        _si -> y_.d[n]-
                    )

                    _so & vy => _x.a-

                    vy & (& : n : N : _x.d[n]) -> _s-
                    ~g._pReset | ~vy -> _s+

                    __s => _so-

                    (: n : N :
                        y_.d[n] => _y.d[n]-
                    )

                    (| : n : N : ~_y.d[n]) => vy+
                }
            [] LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    ~_s<16> -> __s+
                    _s<10> -> __s-

                    (: n : N :
                        ~__s<27> & ~_x.d[n]<27> & ~_si<27> -> y_.d[n]+
                        _si<15> -> y_.d[n]-
                    )

                    _so<9> & vy<9> -> _x.a-
                    ~_so<9> | ~vy<9> -> _x.a+

                    vy<18> & (& : n : N : _x.d[n]<18>) -> _s-
                    ~g._pReset<9> | ~vy<20> -> _s+

                    __s<12> -> _so-
                    ~__s<18> -> _so+

                    (: n : N :
                        ~y_.d[n]<12> -> _y.d[n]+
                        y_.d[n]<12> -> _y.d[n]-
                    )

                    (| : n : N : ~_y.d[n]<12>) -> vy+
                    (& : n : N : _y.d[n]<18>) -> vy-
                }
            ]
        }
    } // namespace deserial_ring

    export
    template <pint M, N; pbool invert_y, flip_words>
    defproc DESERIAL_RING (globals g; a1of<N> x; eMx1ofN<M, N> y) {
        // convert AEXT/AERV serial protocol to eMx1ofN with ring
        // M 1-in-N words
        // invert_y invert the sense of y to active-low
        // flip_words flip the word ordering of the output
        //   flip_words -> node[0] is y.m[M-1]
        //  ~flip_words -> node[0] is y.m[0]
        deserial_ring::SPLIT<M, N> split(g, x,);
        deserial_ring::NODE<N, invert_y> node[M];
        (; m : M :
            node[m].g = g;
            node[m]._x = split._y[m];
            [ ~flip_words ->
                node[m].y = y.m[m];
            [] flip_words ->
                node[m].y = y.m[M-1-m];
            ]
        )

        (; m : M-1 :
            node[m]._so = node[m+1]._si;
        )
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~g._sReset | ~node[M-1]._so & ~y.e  -> node[0]._si+
                g._sReset & node[M-1]._so & y.e  -> node[0]._si-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~g._sReset | ~node[M-1]._so<27> & ~y.e<27> -> node[0]._si+
                g._sReset<18> & node[M-1]._so<18> & y.e<18> -> node[0]._si-
            }
        ]
    }

    namespace serial_ring {
        export
        template <pint M, N>
        defproc RING (globals g; bool _si, _so; c1of<N> x[M]; a1of<N> _y) {
            bool _u[M], __u[M], ___u[M], _si_[M], __si[M], so[M], _so_[M];
            _si = _si_[0];
            _so = _so_[M-1];
            bool ya = _y.a; // active high
            [ M > 1 ->
                (; m : 1..M-1 :
                    _si_[m] = _so_[m-1];
                )
            ]
            c1of<N> _x[M];
            c1of<N> y;
            [ ~LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: m : M :
                        (: n : N :
                            x[m].d[n] => _x[m].d[n]-
                        )
                    )

                    (: m : M :
                        _u[m] => __u[m]-
                    )

                    (: m : M :
                        so[m] => _so_[m]-
                    )

                    (: n : N :
                        (| : m : M : ~_x[m].d[n] & ~__u[m] & ~_si_[m]) -> y.d[n]+
                        g.pReset | (| : m : M : _so_[m] & __u[m]) -> y.d[n]-
                    )

                    (: m : M :
                        _si_[m] => __si[m]-
                    )

                    (: m : M :
                        __si[m] & ya -> _u[m]-
                        ~g._pReset | ~__si[m] -> _u[m]+
                    )

                    (: m : M :
                        __u[m] => ___u[m]-
                    )

                    (: m : M :
                        ~___u[m] & ~ya -> so[m]+
                        ___u[m] & (& : n : N : _x[m].d[n]) -> so[m]-
                    )
                }
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N :
                        ~y.d[n] -> _y.d[n]+
                        y.d[n] -> _y.d[n]-
                    )
                }
            [] LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N :
                        (| : m : M : ~_x[m].d[n]<27> & ~_si_[m]<27> & ~__u[m]<27>) -> y.d[n]+
                        g.pReset<6> | (| : m : M : _so_[m]<18> & __u[m]<18>) -> y.d[n]-
                    )

                    (: m : M :
                        (: n : N :
                            ~x[m].d[n]<12> -> _x[m].d[n]+
                            x[m].d[n]<9> -> _x[m].d[n]-
                        )
                    )

                    (: m : M :
                        ~_u[m]<24> -> __u[m]+
                        _u[m]<16> -> __u[m]-
                    )

                    (: m : M :
                        ~so[m]<23> -> _so_[m]+
                        so[m]<16> -> _so_[m]-
                    )

                    (: m : M :
                        ~_si_[m]<12> -> __si[m]+
                        _si_[m]<8> -> __si[m]-
                    )

                    (: m : M :
                        ya<18> & __si[m]<18> -> _u[m]-
                        ~g._pReset<9> | ~__si[m]<16> -> _u[m]+
                    )

                    (: m : M :
                        ~__u[m]<18> -> ___u[m]+
                        __u[m]<12> -> ___u[m]-
                    )

                    (: m : M :
                        ~ya<27> & ~___u[m]<27> -> so[m]+
                        (& : n : N : _x[m].d[n]<18>) & ___u[m]<18> -> so[m]-
                    )
                }
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N :
                        ~y.d[n]<12> -> _y.d[n]+
                        y.d[n]<9> -> _y.d[n]-
                    )
                }
            ]
        }

        export
        template <pint N | pint M>
        defproc SEQ (globals g; bool _si, _so, yi, yp; a1of<N> _x; c1of<N> y) {
            bool __si;
            bool xa = _x.a; // active high
            c1of<N> __x, _y;
            c1of<N> __y = y;
            [ ~LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (| : n : N : ~_x.d[n]) -> yp+
                    g.pReset | _si & yi -> yp-

                    _si => __si-

                    __si -> _so-
                    ~__si & ~yi & ~yp -> _so+

                    (: n : N :
                        _x.d[n] => __x.d[n]-
                    )

                    (: n : N :
                        yi & __x.d[n] -> _y.d[n]-
                        ~__x.d[n] -> _y.d[n]+
                    )

                    (| : n : N : ~_y.d[n]) & ~yi -> xa+
                    g.pReset | yi -> xa-
                }
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N :
                        _y.d[n] => __y.d[n]-
                    )
                }
            [] LAYOUT ->
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (| : n : N : ~_y.d[n]<27>) & ~yi<27> -> xa+
                    g.pReset<6> | yi<18> -> xa-

                    (| : n : N : ~_x.d[n]<15>) -> yp+
                    g.pReset<6> | _si<18> & yi<18> -> yp-

                    ~_si<12> -> __si+
                    _si<9> -> __si-

                    __si<18> -> _so-
                    ~yi<27> & ~yp<27> & ~__si<27> -> _so+

                    (: n : N :
                        ~_x.d[n]<12> -> __x.d[n]+
                        _x.d[n]<9> -> __x.d[n]-
                    )

                    (: n : N :
                        yi<16> & __x.d[n]<16> -> _y.d[n]-
                        ~__x.d[n]<16> -> _y.d[n]+
                    )

                }
                prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                    (: n : N :
                        ~_y.d[n]<12> -> __y.d[n]+
                        _y.d[n]<9> -> __y.d[n]-
                    )
                }
            ]
        }
    } // namespace serial_ring

    export
    template <pint M, N>
    defproc SERIAL_RING (globals g; eMx1ofN<M, N> x; bool yi, yp; c1of<N> y) {
        // convert eMx1ofN protocol to AEXT/AERV serial with ring
        // highest order in word in input is first word in output
        bool _s = x.e;
        serial_ring::RING<M, N> ring(g,, _s,,);
        serial_ring::SEQ<N, M> seq(g,, ring._si, yi, yp, ring._y, y);
        (; m : M :
            ring.x[m] = x.m[M-1-m];
        )
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                _s => seq._si-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                ~_s<12> -> seq._si+
                _s<9> -> seq._si-
            }
        ]
    }

    export
    template <pint M, N>
    defproc SERIAL_MERGE (globals g; bool xp[M], xo[M], yi, yp; c1of<N> x[M], y) {
        // merges aext/aerv protocol serial streams
        // M client streams to merge
        // N 1-of-N data
        ::aer::arbiter::N_ARB_S_PREQ<M> arb_req(g, xp, xo, yi, yp);
        c1of<N> b;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    (| : m : M : x[m].d[n]) => b.d[n]-
                    b.d[n] => y.d[n]-
                )
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                (: n : N :
                    (| : m : M : x[m].d[n]<12>) -> b.d[n]-
                    (& : m : M : ~x[m].d[n]<18>) -> b.d[n]+
                    b.d[n]<9> -> y.d[n]-
                    ~b.d[n]<12> -> y.d[n]+
                )
            }
        ]
    }
}

} // namespace aer
