// This file defines a tree transmitter and receiver.
// The data traverses the tree with a serialized packet format.
import "aer_brainstorm/lib/globals.act";
import "aer_brainstorm/lib/channel.act";
import "aer_brainstorm/lib/arbiter.act";
import "aer_brainstorm/lib/logic.act";

namespace interface {
    export
    template <pint N | pint M>
    defproc OUT_a1ofN (globals g; bool xp, xo; c1of<N> x; a1of<N> y) {
        // convert AEXT/AERV serial protocol to standard a1ofN channel
        x.d = y.d;
        prs {
            xp & ~y.a => xo+
        }
    }

    namespace deserial_ring {
        export
        template <pint M, N>
        defproc SPLIT (globals g; a1of<N> x, y[M]) {
            (; m : M :
                y[m].d = x.d;
            )
            OR<M> or(g,, x.a);
            (; m : M :
                y[m].a = or.i[m];
            )
        }
        
        export
        template <pint N>
        defproc NODE (globals g; a1of<N> x; c1of<N> y; bool si, so) {
            bool vy, s;
            prs<g.Vdd, g.GND> {
                (: n : N :
                    ~s & si & x.d[n] -> y.d[n]+
                    ~si -> y.d[n]-
                )
        
                ~so & vy => x.a+
        
                vy & (& : n : N : ~x.d[n]) -> s+
                g.pReset | ~vy -> s-
        
                s => so+

                (| : n : N : y.d[n]) => vy+
            }
        }
    } // namespace deserial_ring
    
    export
    template <pint M, N>
    defproc DESERIAL_RING (globals g; a1of<N> x; eMx1ofN<M, N> y) {
        // convert AEXT/AERV serial protocol to eMx1ofN with ring
        deserial_ring::SPLIT<M, N> split(g, x,);
        deserial_ring::NODE<N> node[M];
        (; m : M :
            node[m].g = g;
            node[m].x = split.y[m];
            node[m].y = y.m[M-1-m];
        )
        (; m : M-1 :
            node[m].so = node[m+1].si;
        )
        prs<g.Vdd, g.GND> {
            ~g.sReset & ~node[M-1].so & y.e  -> node[0].si+
            g.sReset | node[M-1].so & ~y.e  -> node[0].si-
        }
    }

    namespace serial_ring {
        export
        template <pint M, N>
        defproc RING (globals g; bool si, so; c1of<N> x[M]; a1of<N> y) {
            bool u[M], s[M+1];
            si = s[0];
            so = s[M];
            prs<g.Vdd, g.GND> {
                (: n : N :
                    (| : m : M : x[m].d[n] & ~u[m] & s[m]) -> y.d[n]+
                    g.pReset | (| : m : M : u[m] & ~s[m+1]) -> y.d[n]-
                )
        
                (: m : M :
                    s[m] & y.a -> u[m]+
                    g.pReset | ~s[m] -> u[m]-
                )
        
                (: m : M :
                    u[m] & ~y.a -> s[m+1]+
                    ~u[m] & (& : n : N : ~x[m].d[n]) -> s[m+1]-
                )
            }
        }
        
        export
        template <pint N>
        defproc SEQ (globals g; bool si, so, yi, yp; a1of<N> x; c1of<N> y) {
            prs<g.Vdd, g.GND> {
                (| : n : N : x.d[n]) -> yp+
                g.pReset | ~si & yi -> yp-
        
                si -> so+
                ~si & ~yi & ~yp -> so-
        
                (: n : N :
                    yi & x.d[n] -> y.d[n]+
                    ~x.d[n] -> y.d[n]-
                )
        
                (| : n : N : y.d[n]) & ~yi -> x.a+
                g.pReset | yi -> x.a-
            }
        }
    } // namespace serial_ring

    export
    template <pint M, N>
    defproc SERIAL_RING (globals g; eMx1ofN<M, N> x; bool yi, yp; c1of<N> y) {
        // convert eMx1ofN protocol to AEXT/AERV serial with ring
        // highest order in word in input is first word in output
        bool s = x.e;
        serial_ring::RING<M, N> ring(g,,,,);
        serial_ring::SEQ<N> seq(g, s, ring.si, yi, yp, ring.y, y);
        (; m : M :
            ring.x[m] = x.m[M-1-m];
        )
        prs<g.Vdd, g.GND> {
            ring.so => s-
        }
    }

    export
    template <pint M, N>
    defproc SERIAL_MERGE (globals g; bool xp[M], xo[M], yi, yp; c1of<N> x[M], y) {
        // merges aext/aerv protocol serial streams
        // M client streams to merge
        // N 1-of-N data
        ::arbiter::N_ARB_S_PREQ<M> arb_req(g, xp, xo, yi, yp);
        prs<g.Vdd, g.GND> {
            (: n : N :
                (| : m : M : x[m].d[n]) => y.d[n]+
            )
        }
    }
}
