namespace aer {
////////////////////////////////////////////////////////////////////////////////
// Standard Code Words
//
// We only support 1ofN representations
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////
// Templated Code Words
////////////////////////////////////////

export template<pint N>
deftype c1of <: int<1> (bool n[N], d[N]) {
    n = d;
    set { }
    get { }
}

export template<pint N>
deftype d1of <: int<N> (bool d[N])
{ 
   set { }
   get { }
}

////////////////////////////////////////
// Specific Code Words
////////////////////////////////////////

export deftype c1of1 <: int<1> (bool n[1], d) {
    n[0] = d;
    set { }
    get { }
}

export deftype c1of2 <: int<1> (bool n[2], d[2], t, f) {
    n[0] = f;
    n[1] = t;
    n = d;
    set { }
    get { }
}

export deftype c1of4 <: int<2> (bool n[4], d[4]) {
    n[0] = d[0];
    n[1] = d[1];
    n[2] = d[2];
    n[3] = d[3];
    set { }
    get { }
}

export deftype dualrail <: int<1> (bool d[2], t, f) {
    d[0] = f;
    d[1] = t;
    spec {
      exclhi (t,f)
    }
    set { }
    get { }
}

export deftype _dualrail <: int<1> (bool d[2]; bool t, f)
{
  d[0] = f;
  d[1] = t;
  spec {
    excllo (t,f)
  }
  set { }
  get { }
}

////////////////////////////////////////////////////////////////////////////////
// Standard Channels
//
// We only support Mx1ofN representations in e, ev, a, and av flavors
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////
// Templated e-type channels
////////////////////////////////////////

//Channel: e1of<N>
export template <pint N>
defchan e1of <: chan(int<1>) (c1of<N> m, b; bool d[N], e) {
    m = b;
    m.n = d;
    send { }
    recv { }
}

//Channel: eMx1ofN<M, N>
export template <pint M, N>
defchan eMx1ofN <: chan(int<M>) (c1of<N> m[M], b[M]; bool e) {
    m = b;
    send { }
    recv { }
}

//Channel: ev1of<N>
export template <pint N>
defchan ev1of <: chan(int<1>) (c1of<N> m, b; bool d[N], e, v) {
    m = b;
    m.n = d;
    send { }
    recv { }
}

//Channel: evMx1ofN<M, N>
export template <pint M, N>
defchan  evMx1ofN <: chan(int<M>) (c1of<N> m[M], b[M]; bool e, v) {
    m = b;
    send { }
    recv { }
}

////////////////////////////////////////
// Specfic e-type channels
////////////////////////////////////////

//Channel: e1of1
export defchan e1of1 <: chan(int<1>) (c1of1 m, b; bool d, e) {
    m = b;
    m.n[0] = d;
    send { }
    recv { }
}

//Channel: e1of2
export defchan e1of2 <: chan(int<1>) (c1of2 m, b; bool d[2], n[2], t, f, e) {
    m = b;
    m.n = n;
    m.n = d;
    m.n[0] = f;
    m.n[1] = t;
    send { }
    recv { }
}

//Channel: e1of2
export defchan e1of4 <: chan(int<2>) (c1of4 m, b; bool d[4], n[4], e) {
    m = b;
    m.n = d;
    m.n = n;
    send { }
    recv { }
}

//Channel: eMx1of2<M>
export template<pint M>
defchan eMx1of2 <: chan(int<M>) (c1of2 m[M], b[M]; bool e)
{
    m = b;
    send { }
    recv { }
}

//Channel: eMx1of4<M>
export template<pint M>
defchan eMx1of4 <: chan(int<M*2>) (c1of4 m[M], b[M]; bool e)
{
    m = b;
    send { }
    recv { }
}

////////////////////////////////////////
// Templated a-type channels
////////////////////////////////////////

//Channel: a1of<N>
export template <pint N>
defchan a1of <: chan(int<1>) (c1of<N> m, b; bool d[N], a) {
    m = b;
    m.n = d;
    send { }
    recv { }
}

//Channel: aMx1ofN<M, N>
export template <pint M, N>
defchan aMx1ofN <: chan(int<M>) (c1of<N> m[M], b[M]; bool a) {
    m = b;
    send { }
    recv { }
}

//Channel: avMx1ofN<M, N>
export template <pint M, N>
defchan avMx1ofN <: chan(int<M>) (c1of<N> m[M], b[M]; bool a, v) {
    m = b;
    send { }
    recv { }
}

////////////////////////////////////////
// Specific a-type channels
////////////////////////////////////////

//Channel: a1of1
export defchan a1of1 <: chan(int<1>) (c1of1 m, b; bool d, a) {
    m = b;
    m.n[0] = d;
    send { }
    recv { }
}

//Channel: a1of2
export defchan a1of2 <: chan(int<1>) (c1of2 m, b; bool d[2], t, f, a) {
    m = b;
    m.n[0] = f;
    m.n[1] = t;
    m.n[0] = d[0];
    m.n[1] = d[1];
    send { }
    recv { }
}

//Channel: aMx1of4<M>
export template<pint M>
defchan aMx1of4 <: chan(int<M*2>) (c1of4 m[M], b[M]; bool a)
{
    m = b;
    send { }
    recv { }
}

} // namespace aer
