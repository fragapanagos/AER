// Defines processes used in data communication
import "aer/lib/channel.act";
import "aer/lib/logic.act";

namespace aer {

export
template <pint M, N>
defproc VN_aMx1ofN (globals g; aMx1ofN<M, N> d) {
    // detects data validity/neutrality on d
    // [V(d.m)];d.a+;[~V(d.m)];d.a-
    OR<N> or[M];
    (; m : M :
        or[m].g = g;
        (; n : N :
            or[m].i[n] = d.m[m].n[n];
        )
    )
    C_TREE<M> c_tree(g,,);
    (; k : M :
        or[k].o = c_tree.i[k];
    )
    c_tree.o = d.a;
}

export
template <pint N>
defproc VN_a1ofN (globals g; a1of<N> d) {
    // detects data validity/neutrality on d
    // [V(d.m)];d.a+;[~V(d.m)];d.a-
    OR<N> or(g, d.d, d.a);
}

export
template <pint M, N>
defproc _VN (globals g; c1of<N> _d[M]; bool _o) {
    // active low version of VN
    _OR<N> _or[M];
    (; m : M :
        _or[m].g = g;
        (; n : N :
            _or[m]._i[n] = _d[m].n[n];
        )
    )

    C_TREE<M> c_tree(g, ,_o);

    (; k : M :
        _or[k]._o = c_tree.i[k];
    )
}

export
template <pint N>
defproc VN_e1ofN (globals g; e1of<N> d) {
    // detects data validity/neutrality on d
    // d.e+;[V(d.m)];d.e-;[~V(d.m)]
    OR<N> or(g, d.d,);
    prs<g.Vdd, g.GND> {
        or.o => d.e-
    }
}

export
template <pint M, N>
defproc VN_eMx1ofN (globals g; eMx1ofN<M, N> d) {
    // detects data validity/neutrality on d
    // d.e+;[V(d.m)];d.e-;[~V(d.m)]
    OR<N> or[M];
    (; m : M :
        or[m].g = g;
        (; n : N :
            or[m].i[n] = d.m[m].n[n];
        )
    )

    [ M = 1 ->
        prs<g.Vdd, g.GND> {
            g._sReset<18> & or[0].o<18> -> d.e-
            ~g._sReset | ~or[0].o<18> -> d.e+
        }
    [] M > 1 ->
        C_TREE<M> c_tree(g,,);
        (; k : M :
            or[k].o = c_tree.i[k];
        )

        prs<g.Vdd, g.GND> {
            g._sReset<18> & c_tree.o<18> -> d.e-
            ~g._sReset | ~c_tree.o<18> -> d.e+
        }
    ]
}

export
template <pint M_1of2, M_1of4>
defproc Mx1of2_to_Mx1of4 (globals g; c1of2 x[M_1of2]; c1of4 y[M_1of4]) {
    // converts an Mx1of2 channel to an Mx1of4 channel
    M_1of2 = (M_1of4*2); // assert
    c1of4 _y[M_1of4];
    prs<g.Vdd, g.GND | g.vpsub, g.vpsub> {
        (: m4 : M_1of4 :
            x[m4*2].d[0]<10> & x[m4*2+1].d[0]<10> -> _y[m4].d[0]-
            ~x[m4*2].d[0]<20> & ~x[m4*2+1].d[0]<20> -> _y[m4].d[0]+

            x[m4*2].d[1]<10> & x[m4*2+1].d[0]<10> -> _y[m4].d[1]-
            ~x[m4*2].d[1]<20> & ~x[m4*2+1].d[0]<20> -> _y[m4].d[1]+

            x[m4*2].d[0]<10> & x[m4*2+1].d[1]<10> -> _y[m4].d[2]-
            ~x[m4*2].d[0]<20> & ~x[m4*2+1].d[1]<20> -> _y[m4].d[2]+

            x[m4*2].d[1]<10> & x[m4*2+1].d[1]<10> -> _y[m4].d[3]-
            ~x[m4*2].d[1]<20> & ~x[m4*2+1].d[1]<20> -> _y[m4].d[3]+
        )
        (: m4 : M_1of4 :
            (: n : 4 :
                ~_y[m4].d[n]<12> -> y[m4].d[n]+
                _y[m4].d[n]<9> -> y[m4].d[n]-
            )
        )
    }
}

export
template <pint M_1of2, M_1of4>
defproc eMx1of2_to_eMx1of4 (globals g; eMx1of2<M_1of2> x; eMx1of4<M_1of4> y) {
    // converts an eMx1of2 channel to an eMx1of4 channel
    Mx1of2_to_Mx1of4<M_1of2, M_1of4> _(g,,);
    _.x = x.m;
    _.y = y.m;
    x.e = y.e;
}

export
template <pint M_1of4, M_1of2>
defproc Mx1of4_to_Mx1of2 (globals g; c1of4 x[M_1of4]; c1of2 y[M_1of2]) {
    // converts an Mx1of4 channel to an Mx1of2 channel
    M_1of2 = (M_1of4*2); // assert
    c1of2 _y[M_1of2];
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: m4 : M_1of4 :
            x[m4].d[0]<6> | x[m4].d[2]<6> -> _y[m4*2].d[0]-
            ~x[m4].d[0]<18> & ~x[m4].d[2]<18> -> _y[m4*2].d[0]+

            x[m4].d[1]<6> | x[m4].d[3]<6> -> _y[m4*2].d[1]-
            ~x[m4].d[1]<18> & ~x[m4].d[3]<18> -> _y[m4*2].d[1]+

            x[m4].d[0]<6> | x[m4].d[1]<6> -> _y[m4*2+1].d[0]-
            ~x[m4].d[0]<18> & ~x[m4].d[1]<18> -> _y[m4*2+1].d[0]+

            x[m4].d[2]<6> | x[m4].d[3]<6> -> _y[m4*2+1].d[1]-
            ~x[m4].d[2]<18> & ~x[m4].d[3]<18> -> _y[m4*2+1].d[1]+
        )
        (: m2 : M_1of2 :
            (: n : 2 :
                ~_y[m2].d[n]<9> -> y[m2].d[n]+
                _y[m2].d[n]<6> -> y[m2].d[n]-
            )
        )
    }
}

export
template <pint M_1of4, M_1of2>
defproc eMx1of4_to_eMx1of2 (globals g; eMx1of4<M_1of4> x; eMx1of2<M_1of2> y) {
    // converts an eMx1of2 channel to an eMx1of4 channel
    Mx1of4_to_Mx1of2<M_1of4, M_1of2> _(g,,);
    _.x = x.m;
    _.y = y.m;
    x.e = y.e;
}

export
template <pint M; pint S[M]; pint C[M]>
defproc REPEATER_BOOL (globals g; bool i, o) {
    // inverter chain with wire cap modeling support
    // M stages (must be even to preserve sense)
    // S[M] scalings (in units of min inverter size)
    // C[M] capacitances (in units of min inverter capitance)
    preal min_inv_cap = 0.25; // assume min_inv_cap=0.25
    [ M > 0 ->
        (; m : M : [S[m]<=0 -> 0=1;]) // assert false
        bool x[M+1];
        x[0] = i;
        x[M] = o;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            (: m : M :
                [loadcap=C[m]*min_inv_cap] x[m]<S[m]*6> -> x[m+1]-
                [loadcap=C[m]*min_inv_cap] ~x[m]<S[m]*9> -> x[m+1]+
            )
        }
    [] M = 0 ->
        i = o;
        prs<g.Vdd, g.GND> {} // HACK so netgen -B doesn't complain
    ]
}

export
template <pint N, M; pint S[M], C[M]>
defproc REPEATER_c1of (globals g; c1of<N> i, o) {
    // data repeater with wire cap modeling support
    // N 1-of-N data
    // M inverter stages (must be even to preserve sense)
    // S[M] scalings (applied to min inverter size)
    // C[M] capacitances 
    REPEATER_BOOL<M, S, C> _[N];
    (; n : N :
        _[n].g = g;
        _[n].i = i.d[n];
        _[n].o = o.d[n];
    )
}

} // namespace aer
