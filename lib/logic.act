// Defines N input logic gates
import "aer/lib/globals.act";
import "aer/lib/channel.act";
import "aer/lib/logic.h";

namespace aer {

export
template <pint N>
defproc AND (globals g; bool i[N], o) {
    // Logical AND implemented with as few transistors as possible
    // Implemented as an AND tree with 3 input NANDs and NORs
    [ N = 1 ->
        i[0] = o;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK so netgen -B doesn't complain
    [] N = 2 ->
        bool _x01;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] => _x01-
            _x01 => o-
        }
    [] N = 3 ->
        bool _x012;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] & i[2] => _x012-
            _x012 => o-
        }
    [] N = 4 ->
        bool _x01, _x23;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] & i[1] => _x01-
                i[2] & i[3] => _x23-
                _x01 | _x23 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<12> & i[1]<12> -> _x01-
                ~i[0]<12> | ~i[1]<12> -> _x01+
                i[2]<12> & i[3]<12> -> _x23-
                ~i[2]<9> | ~i[3]<9> -> _x23+
                _x01<8> | _x23<8> -> o-
                ~_x01<18> & ~_x23<18> -> o+
            }
        ]
    [] N = 5 ->
        bool _x012, _x34;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] & i[2] => _x012-
            i[3] & i[4] => _x34-
            _x012 | _x34 => o-
        }
    [] N = 6 ->
        bool _x012, _x345;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] & i[1] & i[2] => _x012-
                i[3] & i[4] & i[5] => _x345-
                _x012 | _x345 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<18> & i[1]<18> & i[2]<18> -> _x012-
                ~i[0]<12> | ~i[1]<12> | ~i[2]<12> -> _x012+
                i[3]<18> & i[4]<18> & i[5]<18> -> _x345-
                ~i[3]<12> | ~i[4]<12> | ~i[5]<12> -> _x345+
                ~_x012<18> & ~_x345<18> -> o+
                _x012<6> | _x345<6> -> o-
            }
        ]
    [] N = 7 ->
        bool _x012, _x345, _x6;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] & i[2] => _x012-
            i[3] & i[4] & i[5] => _x345-
            i[6] => _x6-
            _x012 | _x345 | _x6  => o-
        }
    [] N = 8 ->
        bool _x012, _x345, _x67;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] & i[2] => _x012-
            i[3] & i[4] & i[5] => _x345-
            i[6] & i[7] => _x67-
            _x012 | _x345 | _x67  => o-
        }
    [] N = 9 ->
        bool _x012, _x345, _x678;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
            i[0] & i[1] & i[2] => _x012-
            i[3] & i[4] & i[5] => _x345-
            i[6] & i[7] & i[8] => _x678-
            _x012 | _x345 | _x678  => o-
        }
    [] N > 9 ->
        pint k = N/9;
        AND<9> and9(g,, o);
        AND<k> and0_7[8];
        AND<N-8*k> and8(g, i[8*k..N-1], and9.i[8]);
        (; nn : 8 :
            and0_7[nn].g = g;
            and0_7[nn].i = i[nn*k..(nn+1)*k-1];
            and0_7[nn].o = and9.i[nn];
        )
    ]
}

export
template <pint N>
defproc _AND (globals g; bool _i[N], _o) {
    // active low version of AND
    OR<N> _(g, _i, _o);
}

export
template <pint N>
defproc AND_LINE (globals g; bool i[N], o) {
    // Logical AND implemented as a line of AND gates
    // Implemented with 2 input NANDs
    [ N = 1 ->
        i[0] = o;
    [] N >= 2 ->
        AND_LINE<N-1> and(g, i[0..N-2],);
        bool _o;
        prs<g.Vdd, g.GND> {
            and.o & i[N-1] => _o-
            _o => o-
        }
    ]
}

export
template <pint N>
defproc OR (globals g; bool i[N], o) {
    // Logical OR implemented with as few transistors as possible
    // Implemented as an OR tree with 3 input NANDs and NORs
    [ N = 1 ->
        i[0] = o;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK so netgen -B doesn't complain
    [] N = 2 ->
        bool _x01;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] => _x01-
                _x01 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> -> _x01-
                ~i[0]<18> & ~i[1]<18> -> _x01+
                _x01<6> -> o-
                ~_x01<9> -> o+
            }
        ]
    [] N = 3 ->
        bool _x012;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                _x012 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                _x012<6> -> o-
                ~_x012<9> -> o+
            }
        ]
    [] N = 4 ->
        bool _x012, _x3;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] => _x3-
                _x012 & _x3 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<8> | i[1]<8> | i[2]<8> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<9> -> _x3-
                ~i[3]<13> -> _x3+
                _x012<12> & _x3<12> -> o-
                ~_x012<10> | ~_x3<10> -> o+
            }
        ]
    [] N = 5 ->
        bool _x012, _x34;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] | i[4] => _x34-
                _x012 & _x34 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<6> | i[4]<6> -> _x34-
                ~i[3]<18> & ~i[4]<18> -> _x34+
                _x012<12> & _x34<12> -> o-
                ~_x012<9> | ~_x34<9> -> o+
            }
        ]
    [] N = 6 ->
        bool _x012, _x345;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] | i[4] | i[5] => _x345-
                _x012 & _x345 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<6> | i[4]<6> | i[5]<6> -> _x345-
                ~i[3]<27> & ~i[4]<27> & ~i[5]<27> -> _x345+
                _x012<12> & _x345<12> -> o-
                ~_x012<9> | ~_x345<9> -> o+
            }
        ]
    [] N = 7 ->
        bool _x012, _x345, _x6;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] | i[4] | i[5] => _x345-
                i[6] => _x6-
                _x012 & _x345 & _x6 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<6> | i[4]<6> | i[5]<6> -> _x345-
                ~i[3]<27> & ~i[4]<27> & ~i[5]<27> -> _x345+
                i[6]<6> -> _x6-
                ~i[6]<9> -> _x6+
                _x012<18> & _x345<18> & _x6<18> -> o-
                ~_x012<9> | ~_x345<9> | ~_x6<9> -> o+
            }
        ]
    [] N = 8 ->
        bool _x012, _x345, _x67;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] | i[4] | i[5] => _x345-
                i[6] | i[7] => _x67-
                _x012 & _x345 & _x67 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<6> | i[4]<6> | i[5]<6> -> _x345-
                ~i[3]<27> & ~i[4]<27> & ~i[5]<27> -> _x345+
                i[6]<6> | i[7]<6> -> _x67-
                ~i[6]<18> & ~i[7]<18> -> _x67+
                _x012<18> & _x345<18> & _x67<18> -> o-
                ~_x012<9> | ~_x345<9> | ~_x67<9> -> o+
            }
        ]
    [] N = 9 ->
        bool _x012, _x345, _x678;
        [ ~LAYOUT ->
            prs<g.Vdd, g.GND> {
                i[0] | i[1] | i[2] => _x012-
                i[3] | i[4] | i[5] => _x345-
                i[6] | i[7] | i[8] => _x678-
                _x012 & _x345 & _x678 => o-
            }
        [] LAYOUT ->
            prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
                i[0]<6> | i[1]<6> | i[2]<6> -> _x012-
                ~i[0]<27> & ~i[1]<27> & ~i[2]<27> -> _x012+
                i[3]<6> | i[4]<6> | i[5]<6> -> _x345-
                ~i[3]<27> & ~i[4]<27> & ~i[5]<27> -> _x345+
                i[6]<6> | i[7]<6> | i[8]<6> -> _x678-
                ~i[6]<27> & ~i[7]<27> & ~i[8]<27> -> _x678+
                _x012<18> & _x345<18> & _x678<18> -> o-
                ~_x012<9> | ~_x345<9> | ~_x678<9> -> o+
            }
        ]
    [] N > 9 ->
        pint k = N/9;
        OR<9> or9(g,, o);
        OR<k> or0_7[8];
        OR<N-8*k> or8(g, i[8*k..N-1], or9.i[8]);
        (; nn : 8 :
            or0_7[nn].g = g;
            or0_7[nn].i = i[nn*k..(nn+1)*k-1];
            or0_7[nn].o = or9.i[nn];
        )
    ]
}

export
template <pint N>
defproc _OR (globals g; bool _i[N], _o) {
    // active low version of OR
    AND<N> _(g, _i, _o);
}

export
template <pint N>
defproc OR_LINE (globals g; bool i[N], o) {
    // Logical OR implemented as line of OR gates
    // Implemented with 2 input NORs
    [ N = 1 ->
        i[0] = o;
    [] N >= 2 ->
        OR_LINE<N-1> or(g, i[0..N-2],);
        bool _o;
        prs<g.Vdd, g.GND> {
            or.o | i[N-1] => _o-
            _o => o-
        }
    ]
}

defproc NOR (globals g; bool i[2], o) {
    // Logical NOR
    prs<g.Vdd, g.GND> {
        i[0] | i[1] => o-
    }
}

export
template <pint N>
defproc C_TREE (globals g; bool i[N], o) {
    [ N = 1 ->
        i[0] = o;
        prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {} // HACK so netgen -B doesn't complain
    [] N = 2 -> 
        bool _o;
        prs<g.Vdd, g.GND> {
            i[0] & i[1] -> _o-
            ~i[0] & ~i[1] -> _o+
            _o => o-
        }
    [] N > 2 ->
        [ N < 4 ->
            C_TREE<N-N/2> c_tree1(g, i[N/2..N-1],);
            C_TREE<2> c_tree2(g,, o);
            c_tree2.i[0] = i[0];
            c_tree2.i[1] = c_tree1.o;
        [] N >= 4 ->
            C_TREE<N/2> c_tree0(g, i[0..N/2-1],);
            C_TREE<N-N/2> c_tree1(g, i[N/2..N-1],);
            C_TREE<2> c_tree2(g,, o);
            c_tree2.i[0] = c_tree0.o;
            c_tree2.i[1] = c_tree1.o;
        ]
    ]
}

} // namespace aer
