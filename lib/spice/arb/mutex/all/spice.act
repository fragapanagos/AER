import "aer/lib/globals.act";
import "aer/lib/channel.act";
import "aer/lib/arbiter.act";

namespace aer {

export defproc Wrapper(globals_np g_np; a1of<1> A[2])
{
    bool Vdd;
    bool GND;
    bool vpsub;
    bool vnsub;
    globals g;

    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    prs <Vdd, GND> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    arbiter::MUTEX p(g,,);

    A[0].d[0] = p.i[0];
    A[1].d[0] = p.i[1];
    A[0].a = p.o[0];
    A[1].a = p.o[1];
}
}

aer::Wrapper dut;
