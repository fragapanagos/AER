import aer/lib/globals.act";
import aer/lib/channel.act";
import aer/lib/arbiter.act";

export defproc wrapper(globals_np g_np; a1of<1> A)
{
    pint N=4;
    bool Vdd;
    bool GND;
    globals g;

    arbiter::N_ARB_S<N> arb(g,,);
    g.Vdd = Vdd;
    g.GND = GND;
    prs <Vdd, GND> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;

    prs<Vdd, GND> {
        A.d[0]<6> -> arb._i[0]-
        ~A.d[0]<9> -> arb._i[0]+
    }
    (; n : 1..N-1 :
        Vdd = arb._i[n];
    )
    arb.o[0] = A.a;
}

wrapper dut;
