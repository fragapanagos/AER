// Processes used in testing
import "aer/lib/environment.act";

namespace aer {
namespace test {

export
template <pint M, T_PIDX, T_WIDX, T_N>
defproc SOURCE_BRAIN_AERV (globals g; eMx1of4<M> d) {
    // generates packets for brainstorm/braindrop receiver
    // packets consist of route words and payload words
    // M packet length
    //     M = 6 (in production for spk packets)
    //     M = 9 (in production for mem packets)
    // T_PIDX index in packet of route's tail word
    //     T_PIDX = 1 (in production for spk/mem packets)
    //     T_PIDX = 4 (in production for spk/mem packets)
    // T_WIDX index in tail word of valid values
    //     T_WIDX = 0 (in production for spk packets)
    //     T_WIDX = 2 (in production for mem packets)
    // T_N values for the route tail word
    //     T_N = 2 (in production for spk packets)
    //     T_N = 1 (in production for mem packets)
    // Example:
    // M=4, T_PIDX=2, T_WIDX=0, T_N=2
    // packet is 4 words long
    // packet[2] is tail word
    // packet[2][0] is starting index of valid values
    // packet[2][0], packet[2][1] are valid tail word values
    SOURCE_random_e1ofN<T_N> tail_src(g,);
    SOURCE_random_eMx1of4<M-1> src(g,);
    tail_src.d.e = d.e;
    src.d.e = d.e;

    d.m[T_PIDX].n[T_WIDX..T_WIDX+T_N-1] = tail_src.d.d;
    (; widx : T_WIDX :
        d.m[T_PIDX].n[widx] = g.GND;
    )
    [ (T_N + T_WIDX) < 4 ->
        (; widx : T_WIDX+T_N..3 :
            d.m[T_PIDX].n[widx] = g.GND;
        )
    ]

    (; m : T_PIDX :
        d.m[m] = src.d.m[m];
    )
    (; m : T_PIDX+1..M-1 :
        d.m[m] = src.d.m[m-1];
    )
}

export
template <pint N>
defproc SINK_SERIAL (globals g; bool p, o; c1of<N> d) {
    // sink for the serial aer protocol
    bool _o;
    c1of<N> _d;
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: n : N :
            ~d.d[n]<9> -> _d.d[n]+
            d.d[n]<6> -> _d.d[n]-
        )

        p<15> & (& : n : N : _d.d[n]<15>) -> _o-
        ~p<10> | (| : n : N : ~_d.d[n]<10>) -> _o+

        ~_o<15> -> o+
        _o<9> -> o-
    }
}

export
defproc NRN (globals g; bool req, ack) {
    // models N neurons producing spikes
    prs<g.Vdd, g.GND> {
        ~g.sReset & ~ack => req+
    }
}

export
template <pint NN>
defproc NRN_ARR (globals g; bool req[NN], ack[NN]) {
    // array of NRN
    NRN _[NN];
    (; nn : NN :
        _[nn].g = g;
        _[nn].req = req[nn];
        _[nn].ack = ack[nn];
    )
}

export
defproc SYNAPSE (globals g; a1of2 spk) {
    // mimics the interface provided by Ben
    bool _ENPU, PULSE, s, Vm;
    bool _PULSE;

    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        _ENPU => Vm-
    
        Vm => _PULSE-
        _PULSE => PULSE-
    
        (spk.d[0] | spk.d[1]) & s -> _ENPU-
        ~spk.d[0] & ~spk.d[1] | ~s -> _ENPU+
    
        PULSE -> s-
        ~PULSE & ~spk.d[0] & ~spk.d[1] -> s+
    
        ~s & ~PULSE -> spk.a+
        s | PULSE -> spk.a-
    }
}

export
template <pint N>
defproc SYNAPSE_ARR (globals g; a1of2 spk[N]) {
    // array of SYNAPSE
    SYNAPSE _[N];
    (; n : N :
        _[n].g = g;
        _[n].spk = spk[n];
    )
}

export
template <pint M>
defproc MEM (globals g; aMx1of4<M> _x; bool _pchg) {
    // models a neuron/synapse configuration memory
    pint D = 4; // 1-of-D data
    SINK_aMx1ofN<M, D> snk(g,);
    _x.a = snk.d.a;
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: m : M :
            (: d : D :
                _x.m[m].d[d] => snk.d.m[m].d[d]-
            )
        )
    }
}

export
template <pint M>
defproc REF_MEM (globals g; aMx1of4<M> _x) {
    // reference version of MEM
    pint D = 4; // 1-of-D data
    SINK_aMx1ofN<M, D> snk(g,);
    _x.a = snk.d.a;
    (; m : M :
        _x.m[m].d = snk.d.m[m].d;
    )
}

export
defproc COSIM_GLOBALS_RESET (globals_np g_np; globals g; bool Vdd, GND, vpsub, vnsub) {
    // boilerplate process for handling reset and globals in cosim
    g.Vdd = Vdd;
    g.GND = GND;
    g.vpsub = vpsub;
    g.vnsub = vnsub;
    prs <g.Vdd, g.GND | g.vpsub, g.vnsub> {
        g_np._sReset<20> => g.sReset-
        g_np._pReset<20> => g.pReset-
    }
    g._pReset = g_np._pReset;
    g._sReset = g_np._sReset;
}

} // namespace test
} // namespace aer
