// contains a modified version of the brainstorm config memory definition
// assumes aer repository positioned as submodule within brainstorm repository
// i.e. as brainstorm/act/aer
import "aer/lib/channel.act";
import "aer/lib/comm.act";
import "lib/channel.act";
import "lib/logic.act";
import "mem/interface.act";
import "mem/decoder.act";
import "mem/bank.act";
import "mem/config_bank.act";

namespace aer {

template <pint M_1of4, M_1of2>
defproc word_1of4_to_1of2 (globals g; c1of4 _x[M_1of4]; c1of2 y[M_1of2]) {
    // converts word from Mx1of4 to Mx1of2
    M_1of2 = (M_1of4*2); // assert
    prs<g.Vdd, g.GND> {
        (: m4 : M_1of4 :
            ~_x[m4].d[0]<9> | ~_x[m4].d[2]<9> -> y[m4*2].d[0]+
            _x[m4].d[0]<12> & _x[m4].d[2]<12> -> y[m4*2].d[0]-

            ~_x[m4].d[1]<9> | ~_x[m4].d[3]<9> -> y[m4*2].d[1]+
            _x[m4].d[1]<12> & _x[m4].d[3]<12> -> y[m4*2].d[1]-

            ~_x[m4].d[0]<9> | ~_x[m4].d[1]<9> -> y[m4*2+1].d[0]+
            _x[m4].d[0]<12> & _x[m4].d[1]<12> -> y[m4*2+1].d[0]-

            ~_x[m4].d[2]<9> | ~_x[m4].d[3]<9> -> y[m4*2+1].d[1]+
            _x[m4].d[2]<12> & _x[m4].d[3]<12> -> y[m4*2+1].d[1]-
        )
    }
}

template <pint log4_rows>
defproc row_vn (globals g; c1of4 _row_addr[log4_rows]; bool vn) {
    // checks validity/neutrality of row address data
    pint D = 4; // 1-in-D data
    pint M = log4_rows;
    bool v[M];
    bool _vn;
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: m : M :
            (& : d : D : _row_addr[m].d[d]<12>) -> v[m]-
            (| : d : D : ~_row_addr[m].d[d]<9>) -> v[m]+
        )

        (& : m : M : ~v[m]<12>) -> _vn+
        (& : m : M : v[m]<6>) -> _vn-

        ~_vn<9> -> vn+
        _vn<6> -> vn-
    }
}


template <pint log4_rows, rows>
defproc config_sram_row_addr_decoder (globals g; c1of4 _row_addr[log4_rows]; bool row_select[rows], write_e, data_e) {
    // Converts log4_rows address 1of4 words into an array of row select lines
    // Only supports hardcoded log4_rows and rows. Can be made to support 
    // variable parameter values if necessary.
    log4_rows = 2; // assert
    rows = 16; // assert
    pint D = 4; // 1-in-D data

    row_vn<log4_rows> vn(g, _row_addr,); 

    bool  _write_e;
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        ~write_e<9> -> _write_e+
        write_e<6> -> _write_e-

        ~vn.vn & ~_write_e -> data_e+
        vn.vn & _write_e -> data_e-
    }

    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: d : D :
            (: dd : D :
                ~_row_addr[0].d[dd] & ~_row_addr[1].d[d] -> row_select[4*d+dd]+
                _row_addr[0].d[dd] | _row_addr[1].d[d] -> row_select[4*d+dd]-
            )
        )
    }
}

export
template <pint aerv_words, sram_word_size, cols, rows, log4_rows>
defproc config_sram_interface (globals g; eMx1of4<aerv_words> _aerv_data; eMx1of2<sram_word_size> sram_write; bool sram_col_select[cols], sram_row_select[rows]) {
    // -------------------------------
    //         aerv_data
    //  write   coladdr   rowaddr  
    // -------------------------------
    //    [0]  |  [1]  |    [2,3]     
    // ------------------------------- 
    //     |       |          |
    //     v       |          v
    //  1in4to2    |        decode
    //     |       |          |
    //     v       v          v
    // ------------------------------
    // write   col_select  row_select
    //            sram
    // ------------------------------
    aerv_words = 4; // assert
    sram_word_size = 2; // assert
    cols = 4; // assert
    rows = 16; //assert
    log4_rows = 2; // assert
    word_1of4_to_1of2<1, 2> word_4to2(g,,); // convert the write data to dual rail
    config_sram_row_addr_decoder<log4_rows, rows> row_decoder(g,,,,);  // predecode the row address. col address can be used directly

    _aerv_data.e = row_decoder.data_e;
    _aerv_data.m[0] = word_4to2._x[0];
    _aerv_data.m[2..3] = row_decoder._row_addr;
    sram_write.e = row_decoder.write_e;
    sram_write.m = word_4to2.y;
    prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
        (: d : cols :
            _aerv_data.m[1].d[d] => sram_col_select[d]-
        )
    }
    sram_row_select = row_decoder.row_select;
}

} // namespace aer

namespace mem {

/*
                                  col_select
                          C0      C1      C2     C3  
                          |       |       |       |
   write =================&=======&=======&=======& 
                         | |     | |     | |     | |  
                     ____v v_____v_v_____v_v_____v_v__ 
                    | W0[f,t] W1[f,t] W2[t,f] W3[t,f] |
           r R0---->|S0                               |
           o        |                                 |
           w        |                                 |
           | R1---->|S1                               |
           s    .   |                                 |
           e    .   |              bank               |
           l    .   |                                 |
           e R14--->|S14                              |
           c        |                                 |
           t        |                                 |
             R15--->|S15                              |
                    |_________________________________|

Notes:

*/
export template <pint rows, cols, word_size, write_delay, precharge_delay, pn, width>
defproc config_sramNxM_addr_decoded(globals g; eMx1of2<word_size> write; bool col_select[cols], row_select[rows]; dualrail _q[rows][cols][word_size])
{
	config_bankNxM<rows, cols, word_size, write_delay, precharge_delay, pn, width> bank;

	bank.g = g;
	bank._q = _q;

	/****************** write, col_select => bank.write **********************/
	::logic::andN<cols, false, pn, width, width> get_write_e;
	dualrail _write[cols][word_size];
	(;i:cols:
		get_write_e.a[i] = bank.write[i].e;

		(;j:word_size:
			prs <g.Vdd, g.GND | g.vpsub, g.vnsub>
			{
				write.b[j].f<2*width> & col_select[i]<2*width> -> _write[i][j].f-
				write.b[j].t<2*width> & col_select[i]<2*width> -> _write[i][j].t-
				~write.b[j].f<2*pn*width> & ~col_select[i]<2*pn*width> -> _write[i][j].f+
				~write.b[j].t<2*pn*width> & ~col_select[i]<2*pn*width> -> _write[i][j].t+
				_write[i][j].f<width> -> bank.write[i].b[j].f-
				~_write[i][j].f<pn*width> -> bank.write[i].b[j].f+
				_write[i][j].t<width> -> bank.write[i].b[j].t-
				~_write[i][j].t<pn*width> -> bank.write[i].b[j].t+
			}
		)
	)

	get_write_e.g = g;
	write.e = get_write_e.b;

	/************************* row_select => bank ****************************/
	bank.select = row_select;
}

} // mem
