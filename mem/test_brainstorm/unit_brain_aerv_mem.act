// tests that brain aerv can:
//  - deliver memory packets
// tests that the memory interface can:
//  - decode row addresses 
//  - convert words from 1of4 to 1of2
// Spikes are randomly injected into input stream.
import "aer/aerv/aerv.act";
import "aer/lib/test.act";
import "aer/lib/compat_bs.act";
import "aer/mem/memory.act";

pint M     = 1;
pint Mp4   = 4; // 4**M
pint M_SPK = M+1;
pint M_MEM = M+4;
pint N_SYN = Mp4;
pint N_MEM = N_SYN/4;
pint D     = 4;

aer::globals g_aer;
aer::globals g = g_aer;
globals g_bs;
compat_bs::globals g_compat(g_aer, g_bs);
bool Reset = g.sReset;

aer::test::SOURCE_BRAIN_AERV<M_SPK, M_SPK-M, 0, 2> spk_src(g,);

aer::eMx1of4<M_MEM> mem_src;
aer::test::SYNAPSE spk_snk[N_SYN];

pint rows = 8;
pint cols = 8;
pint word_size = 2;
aer::e1of<cols*word_size> mem_bl_;
aer::e1of<cols*word_size> mem_bl;
aer::e1of<cols> mem_col_select;
aer::e1of<rows> mem_row_select;
aer::aMx1of4<M_MEM-M> aerv__y_mem;

mem::config_sram sram(g_bs, aerv__y_mem,,,,,);

aer::a1of2 aerv_y_syn[N_SYN];
(; n : N_SYN :
    spk_snk[n].g = g;
    spk_snk[n].spk = aerv_y_syn[n];
)

aer::BRAIN_AERV<M, Mp4, M_SPK, M_MEM, N_SYN, N_MEM> aerv(
    g, spk_src.d, mem_src, aerv_y_syn, {aerv__y_mem});

// for expectfile
prs<g.Vdd, g.GND> {
    (: n : cols*word_size :
        [after=0] sram.bl_[n] => mem_bl_.d[n]-
        [after=0] sram.bl[n] => mem_bl.d[n]-
    )
    [after=0] (| : n : cols*word_size : mem_bl_.d[n]) => mem_bl_.e-
    [after=0] (| : n : cols*word_size : mem_bl.d[n]) => mem_bl.e-
}
mem_col_select.d = sram.col_select;
mem_row_select.d = sram.row_select;
prs {
    [after=0] sram._aerv_data.a => mem_col_select.e-
    [after=0] sram._aerv_data.a => mem_row_select.e-
}
