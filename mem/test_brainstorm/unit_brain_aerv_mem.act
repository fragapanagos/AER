// tests that brain aerv can:
//  - deliver memory packets
// tests that the memory interface can:
//  - decode row addresses 
//  - convert words from 1of4 to 1of2
// Spikes are randomly injected into input stream.
import "aer/aerv/aerv.act";
import "aer/lib/test.act";
import "aer/lib/compat_bs.act";
import "aer/mem/memory.act";

pint M     = 1;
pint Mp4   = 4; // 4**M
pint M_SPK = M+1;
pint M_MEM = M+4;
pint N_SYN = Mp4;
pint N_MEM = N_SYN/4;
pint D     = 4;
pbool flip_mem_out = true;

aer::globals g_aer;
aer::globals g = g_aer;
globals g_bs;
compat_bs::globals g_compat(g_aer, g_bs);
bool Reset = g.sReset;

aer::SOURCE_BRAIN_AERV<M_SPK, M_SPK-M, 0, 2> spk_src(g,);

aer::eMx1of4<M_MEM> mem_src;
aer::SYNAPSE spk_snk[N_SYN];

pint rows = 8;
pint cols = 8;
pint addr_1of4 = 3;
pint word_size = 2;
aer::config_sram_interface<M_MEM-M, word_size, cols, rows, addr_1of4> sram_interface[N_MEM];
mem::config_sramNxM_addr_decoded<rows, cols, word_size> sram[N_MEM];
compat_bs::dualrail_arr<word_size> write[N_MEM];
aer::eMx1of4<M_MEM-M> aerv__y_mem[N_MEM];
(; n : N_MEM :
    sram_interface[n].g = g;
    sram[n].g = g_bs;
    sram_interface[n]._aerv_data = aerv__y_mem[n];
    write[n].aer = sram_interface[n]._write;
    write[n].bs = sram[n]._write;
    sram_interface[n]._col_select = sram[n]._col_select;
    sram_interface[n].row_select = sram[n].row_select;
)

aer::a1of2 aerv_y_syn[N_SYN];
(; n : N_SYN :
    spk_snk[n].g = g;
    spk_snk[n].spk = aerv_y_syn[n];
)

aer::BRAIN_AERV<M, Mp4, M_SPK, M_MEM, N_SYN, N_MEM, flip_mem_out> aerv(
    g, spk_src.d, mem_src, aerv_y_syn, aerv__y_mem);

aer::eMx1of2<word_size> mem_write;
aer::e1of<cols> mem_col_select;
aer::e1of<rows> mem_row_select;
prs<g.Vdd, g.GND | g.vpsub, g.vnsub> {
    // for expectfile
    (: m : word_size :
        (: d : 2 :
            [after=0] ~sram_interface[0]._write[m].d[d] -> mem_write.m[m].d[d]+
            [after=0] sram_interface[0]._write[m].d[d] -> mem_write.m[m].d[d]-
        )
    )
}
mem_write.e = sram_interface[0]._aerv_data.e;
prs<g.Vdd, g.GND> {
    // for expectfile
    (: c : cols :
        [after=0] sram_interface[0]._col_select[c] => mem_col_select.d[c]-
    )
}
mem_col_select.e = mem_write.e;
mem_row_select.d = sram_interface[0].row_select;
mem_row_select.e = mem_write.e;
