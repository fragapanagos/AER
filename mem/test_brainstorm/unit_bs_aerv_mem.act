// tests that brain aerv can:
//  - deliver memory packets
// tests that the memory interface can:
//  - decode row addresses 
//  - convert words from 1of4 to 1of2
// Spikes are randomly injected into input stream.
import "aer/aerv/bs_aerv.act";
import "aer/lib/test.act";
import "aer/lib/compat_bs.act";
import "aer/mem/memory.act";

pint M_1of4     = 1;
pint M_1of2     = 2*M_1of4;
pint Mp4        = 4; // 4**M_1of4
pint M_SPK_1of4 = M_1of4+1;
pint M_SPK_1of2 = 2*M_SPK_1of4;
pint M_MEM_1of4 = M_1of4+4;
pint M_MEM_1of2 = 2*M_MEM_1of4;
pint N_SYN      = Mp4;
pint N_MEM      = N_SYN/4;
pint D          = 4;

aer::globals g_aer;
aer::globals g = g_aer;
globals g_bs;
compat_bs::globals g_compat(g_aer, g_bs);
bool Reset = g.sReset;

aer::test::SOURCE_BRAIN_AERV<M_SPK_1of4, M_SPK_1of4-M_1of4, 0, 2> spk_src(g,);

aer::eMx1of4<M_MEM_1of4> mem_src;
aer::eMx1of4_to_eMx1of2<M_SPK_1of4, M_SPK_1of2> spk_src_4to2(g, spk_src.d,);
aer::eMx1of4_to_eMx1of2<M_MEM_1of4, M_MEM_1of2> mem_src_4to2(g, mem_src,);
aer::test::SYNAPSE spk_snk[N_SYN];

pint rows = 8;
pint cols = 8;
pint word_size = 2;
aer::e1of<cols*word_size> mem_bl_;
aer::e1of<cols*word_size> mem_bl;
aer::e1of<cols> mem_col_select;
aer::e1of<rows> mem_row_select;
aer::eMx1of4<M_MEM_1of4-M_1of4> aerv__y_mem;

mem::config_sram sram(g_bs, aerv__y_mem,,,,,);

aer::a1of2 aerv_y_syn[N_SYN];
(; n : N_SYN :
    spk_snk[n].g = g;
    spk_snk[n].spk = aerv_y_syn[n];
)

BS_AERV<M_1of2, M_1of4, Mp4, M_SPK_1of2, M_SPK_1of4, M_MEM_1of2, M_MEM_1of4, N_SYN, N_MEM> aerv(
    g, spk_src_4to2.y, mem_src_4to2.y, aerv_y_syn, {aerv__y_mem});

// for expectfile
prs<g.Vdd, g.GND> {
    (: n : cols*word_size :
        [after=0] sram.bl_[n] => mem_bl_.d[n]-
        [after=0] sram.bl[n] => mem_bl.d[n]-
    )
    [after=0] (| : n : cols*word_size : mem_bl_.d[n]) => mem_bl_.e-
    [after=0] (| : n : cols*word_size : mem_bl.d[n]) => mem_bl.e-
}
mem_col_select.d = sram.col_select;
mem_row_select.d = sram.row_select;
mem_col_select.e = sram._aerv_data.e;
mem_row_select.e = sram._aerv_data.e;
