import "serial_aer.act";

export defproc wrapper(globals_np g_np; a1of<1> src0, src1, src2, src3; a1of<4> snk)
{
    bool Vdd;
    bool GND;
    pint M = 1;
    pint N = 4;
    pint NN = 4;

    aer::transmitter::AEXT<M, N, NN> aext;
    aer::interface::OUT_a1ofN<N, 6> out(aext.g, aext.po, aext.pi, aext.p,);

    // rails and reset
    aext.g.Vdd = Vdd;
    aext.g.GND = GND;
    prs <Vdd, GND> {
        g_np._sReset<20> => aext.g.sReset-
        g_np._pReset<20> => aext.g.pReset-
    }
    aext.g._pReset = g_np._pReset;
    aext.g._sReset = g_np._sReset;

    // connect src
    src0.d[0] = aext.xi[0];
    src1.d[0] = aext.xi[1];
    src2.d[0] = aext.xi[2];
    src3.d[0] = aext.xi[3];
    src0.a = aext.xo[0];
    src1.a = aext.xo[1];
    src2.a = aext.xo[2];
    src3.a = aext.xo[3];

    // connect snk
    prs <Vdd, GND> {
        (: n : N :
            out._y.d[n] -> snk.d[n]-
            ~out._y.d[n] -> snk.d[n]+
        )
        snk.a -> out._y.a-
        ~snk.a -> out._y.a+
    }
}

wrapper dut;
