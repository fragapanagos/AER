import "serial_aer.act";

export defproc wrapper(globals_np g_np; a1of<1> src; eMx1of4<3> snk)
{
    bool Vdd;
    bool GND;
    pint M = 3;
    pint N = 4;
    pint NN = 64;

    aer::transmitter::AEXT<M, N, NN> aext;
    aer::interface::OUT_a1ofN<N, 6> out(aext.g, aext.po, aext.pi, aext.p,);
    aer::interface::DESERIAL_RING<M, N> deserial(aext.g, out._y,);

    // rails and reset
    aext.g.Vdd = Vdd;
    aext.g.GND = GND;
    prs <Vdd, GND> {
        g_np._sReset<20> => aext.g.sReset-
        g_np._pReset<20> => aext.g.pReset-
    }
    aext.g._pReset = g_np._pReset;
    aext.g._sReset = g_np._sReset;

    // connect src
    src.d[0] = aext.xi[0];
    src.a = aext.xo[0];
    (; nn : 1..NN-1 :
        GND = aext.xi[nn];
    )

    // connect snk
    (; m : M :
        deserial.y.b[m].d = snk.b[m].d;
    )
    deserial.y.e = snk.e;
}

wrapper dut;

