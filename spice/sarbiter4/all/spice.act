import "globals.act";
import "channel.act";
import "arbiter.act";

export defproc wrapper(globals_np g_np; a1of<1> A, B, C, D)
{
    bool Vdd;
    bool GND;
    pint width=6;

    arbiter::n_arb_s::N_ARB<4, width> p;
    p.g.Vdd = Vdd;
    p.g.GND = GND;
    prs <Vdd, GND> {
        g_np._sReset<20> => p.g.sReset-
        g_np._pReset<20> => p.g.pReset-
    }
    p.g._pReset = g_np._pReset;
    p.g._sReset = g_np._sReset;

    a1of<1> I[4]; // input alias
    I[0] = A;
    I[1] = B;
    I[2] = C;
    I[3] = D;
    bool b[4][2]; // buffer

    prs<Vdd, GND> {
        (: m : 4 :
            I[m].d[0] -> b[m][0]-
            ~I[m].d[0] -> b[m][0]+
            
            b[m][0] -> b[m][1]-
            ~b[m][0] -> b[m][1]+
        )
    }
    (; m : 4 :
        b[m][1] = p.i[m];
        p.o[m] = I[m].a;
    )
}

wrapper dut;
