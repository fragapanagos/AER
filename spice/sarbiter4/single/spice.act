import "globals.act";
import "channel.act";
import "arbiter.act";

export defproc wrapper(globals_np g_np; a1of<1> A)
{
    bool Vdd;
    bool GND;

    arbiter::n_arb_s::N_ARB<4> p;
    p.g.Vdd = Vdd;
    p.g.GND = GND;
    prs <Vdd, GND> {
        g_np._sReset<20> => p.g.sReset-
        g_np._pReset<20> => p.g.pReset-
    }
    p.g._pReset = g_np._pReset;
    p.g._sReset = g_np._sReset;

    bool bA[2]; // buffer A

    prs<Vdd, GND> {
        A.d[0] -> bA[0]-
        ~A.d[0] -> bA[0]+

        bA[0] -> bA[1]-
        ~bA[0] -> bA[1]+
    }
    bA[1] = p.i[0];
    GND = p.i[1];
    GND = p.i[2];
    GND = p.i[3];
    p.o[0] = A.a;
}

wrapper dut;
